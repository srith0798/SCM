{"version":3,"sources":["../node_modules/refractor/lang/groovy.js"],"names":["groovy","Prism","languages","extend","string","pattern","greedy","keyword","number","operator","lookbehind","punctuation","insertBefore","shebang","alias","annotation","hooks","add","env","language","type","delimiter","content","value","replace","highlight","expression","inside","classes","push","module","exports","displayName","aliases"],"mappings":"wHAMA,SAASA,EAAOC,GACdA,EAAMC,UAAUF,OAASC,EAAMC,UAAUC,OAAO,QAAS,CACvDC,OAAQ,CAAC,CAEPC,QAAS,kFACTC,QAAQ,GACP,CAGDD,QAAS,oCACTC,QAAQ,IAEVC,QAAS,6WACTC,OAAQ,6FACRC,SAAU,CACRJ,QAAS,oJACTK,YAAY,GAEdC,YAAa,sBAEfV,EAAMC,UAAUU,aAAa,SAAU,SAAU,CAC/CC,QAAS,CACPR,QAAS,OACTS,MAAO,aAGXb,EAAMC,UAAUU,aAAa,SAAU,cAAe,CACpD,cAAe,0DAEjBX,EAAMC,UAAUU,aAAa,SAAU,WAAY,CACjDG,WAAY,CACVV,QAAS,eACTK,YAAY,EACZI,MAAO,iBAIXb,EAAMe,MAAMC,IAAI,QAAQ,SAAUC,GAChC,GAAqB,WAAjBA,EAAIC,UAAsC,WAAbD,EAAIE,KAAmB,CACtD,IAAIC,EAAYH,EAAII,QAAQC,MAAM,GAElC,GAAiB,KAAbF,EAAkB,CACpB,IAAIhB,EAAU,kCAEI,MAAdgB,IACFhB,EAAU,mCAIZa,EAAII,QAAQC,MAAQL,EAAII,QAAQC,MAAMC,QAAQ,QAAS,KAAKA,QAAQ,SAAU,KAC9EN,EAAII,QAAUrB,EAAMwB,UAAUP,EAAII,QAAQC,MAAO,CAC/CG,WAAY,CACVrB,QAASA,EACTK,YAAY,EACZiB,OAAQ1B,EAAMC,UAAUF,UAG5BkB,EAAIU,QAAQC,KAAmB,MAAdR,EAAoB,QAAU,gBA7DvDS,EAAOC,QAAU/B,EACjBA,EAAOgC,YAAc,SACrBhC,EAAOiC,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_groovy.0e776293.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = groovy;\ngroovy.displayName = 'groovy';\ngroovy.aliases = [];\n\nfunction groovy(Prism) {\n  Prism.languages.groovy = Prism.languages.extend('clike', {\n    string: [{\n      // https://groovy-lang.org/syntax.html#_dollar_slashy_string\n      pattern: /(\"\"\"|''')(?:[^\\\\]|\\\\[\\s\\S])*?\\1|\\$\\/(?:[^/$]|\\$(?:[/$]|(?![/$]))|\\/(?!\\$))*\\/\\$/,\n      greedy: true\n    }, {\n      // TODO: Slash strings (e.g. /foo/) can contain line breaks but this will cause a lot of trouble with\n      // simple division (see JS regex), so find a fix maybe?\n      pattern: /([\"'/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    }],\n    keyword: /\\b(?:abstract|as|assert|boolean|break|byte|case|catch|char|class|const|continue|def|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|in|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n    number: /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?\\d+)?)[glidf]?\\b/i,\n    operator: {\n      pattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.\\.(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n      lookbehind: true\n    },\n    punctuation: /\\.+|[{}[\\];(),:$]/\n  });\n  Prism.languages.insertBefore('groovy', 'string', {\n    shebang: {\n      pattern: /#!.+/,\n      alias: 'comment'\n    }\n  });\n  Prism.languages.insertBefore('groovy', 'punctuation', {\n    'spock-block': /\\b(?:and|cleanup|expect|given|setup|then|when|where):/\n  });\n  Prism.languages.insertBefore('groovy', 'function', {\n    annotation: {\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: true,\n      alias: 'punctuation'\n    }\n  }); // Handle string interpolation\n\n  Prism.hooks.add('wrap', function (env) {\n    if (env.language === 'groovy' && env.type === 'string') {\n      var delimiter = env.content.value[0];\n\n      if (delimiter != \"'\") {\n        var pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n\n        if (delimiter === '$') {\n          pattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n        } // To prevent double HTML-encoding we have to decode env.content first\n\n\n        env.content.value = env.content.value.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n        env.content = Prism.highlight(env.content.value, {\n          expression: {\n            pattern: pattern,\n            lookbehind: true,\n            inside: Prism.languages.groovy\n          }\n        });\n        env.classes.push(delimiter === '/' ? 'regex' : 'gstring');\n      }\n    }\n  });\n}"],"sourceRoot":""}