{"version":3,"sources":["../node_modules/refractor/lang/ocaml.js"],"names":["ocaml","Prism","languages","comment","pattern","greedy","char","string","number","directive","alias","label","variant","keyword","boolean","operator","punctuation","module","exports","displayName","aliases"],"mappings":"yHAMA,SAASA,EAAMC,GAEbA,EAAMC,UAAUF,MAAQ,CACtBG,QAAS,CACPC,QAAS,mBACTC,QAAQ,GAEVC,KAAM,CACJF,QAAS,+CACTC,QAAQ,GAEVE,OAAQ,CAAC,CACPH,QAAS,sCACTC,QAAQ,GACP,CACDD,QAAS,8BACTC,QAAQ,IAEVG,OAAQ,CACR,uCACA,oEACA,qDACAC,UAAW,CACTL,QAAS,SACTM,MAAO,YAETC,MAAO,CACLP,QAAS,SACTM,MAAO,YAET,gBAAiB,CACfN,QAAS,SACTM,MAAO,YAETE,QAAS,CACPR,QAAS,OACTM,MAAO,UAITG,QAAS,gSACTC,QAAS,qBACT,4BAA6B,CAC3BV,QAAS,yBACTM,MAAO,eAGTK,SAAU,wGACVC,YAAa,+BApDjBC,EAAOC,QAAUlB,EACjBA,EAAMmB,YAAc,QACpBnB,EAAMoB,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_ocaml.0e8d3c08.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = ocaml;\nocaml.displayName = 'ocaml';\nocaml.aliases = [];\n\nfunction ocaml(Prism) {\n  // https://ocaml.org/manual/lex.html\n  Prism.languages.ocaml = {\n    comment: {\n      pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n      greedy: true\n    },\n    char: {\n      pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n      greedy: true\n    },\n    string: [{\n      pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n      greedy: true\n    }, {\n      pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n      greedy: true\n    }],\n    number: [// binary and octal\n    /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i, // hexadecimal\n    /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i, // decimal\n    /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i],\n    directive: {\n      pattern: /\\B#\\w+/,\n      alias: 'property'\n    },\n    label: {\n      pattern: /\\B~\\w+/,\n      alias: 'property'\n    },\n    'type-variable': {\n      pattern: /\\B'\\w+/,\n      alias: 'function'\n    },\n    variant: {\n      pattern: /`\\w+/,\n      alias: 'symbol'\n    },\n    // For the list of keywords and operators,\n    // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n    keyword: /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    'operator-like-punctuation': {\n      pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n      alias: 'punctuation'\n    },\n    // Custom operators are allowed\n    operator: /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n    punctuation: /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n  };\n}"],"sourceRoot":""}