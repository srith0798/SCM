{"version":3,"sources":["../node_modules/refractor/lang/php-extras.js","../node_modules/refractor/lang/markup-templating.js","../node_modules/refractor/lang/php.js"],"names":["refractorPhp","phpExtras","Prism","register","languages","insertBefore","this","global","scope","pattern","inside","keyword","punctuation","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","buildPlaceholders","value","env","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","tokenizePlaceholders","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat","refractorMarkupTemplating","php","comment","constant","alias","greedy","lookbehind","number","operator","delimiter","variable","package","function","property","string_interpolation","string","interpolation","attribute","hooks","add","test"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_phpExtras.157dadbe.chunk.js","sourcesContent":["'use strict';\n\nvar refractorPhp = require('./php.js');\n\nmodule.exports = phpExtras;\nphpExtras.displayName = 'phpExtras';\nphpExtras.aliases = [];\n\nfunction phpExtras(Prism) {\n  Prism.register(refractorPhp);\n  Prism.languages.insertBefore('php', 'variable', {\n    this: /\\$this\\b/,\n    global: /\\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)\\b/,\n    scope: {\n      pattern: /\\b[\\w\\\\]+::/,\n      inside: {\n        keyword: /static|self|parent/,\n        punctuation: /::|\\\\/\n      }\n    }\n  });\n}","'use strict';\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\n\nfunction markupTemplating(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n\n\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n\n\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n\n              var token = tokens[i];\n\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n\n                  replacement.push(middle);\n\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content);\n              }\n            }\n\n            return tokens;\n          }\n\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}","'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = php;\nphp.displayName = 'php';\nphp.aliases = [];\n\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */\n  ;\n\n  (function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/;\n    var constant = [{\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: 'boolean'\n    }, {\n      pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n      greedy: true,\n      lookbehind: true\n    }, /\\b(?:null)\\b/i, /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/];\n    var number = /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i;\n    var operator = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;\n    var punctuation = /[{}\\[\\](),:;]/;\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?=\\{))/i,\n      package: {\n        pattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      'class-name-definition': {\n        pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'function-definition': {\n        pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      keyword: [{\n        pattern: /(\\(\\s*)\\b(?:bool|boolean|int|integer|float|string|object|array)\\b(?=\\s*\\))/i,\n        alias: 'type-casting',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*)\\b(?:bool|int|float|string|object|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*[\\w|]\\|\\s*)(?:null|false)\\b(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?[\\w|]\\|\\s*)(?:null|false)\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|iterable|(?:null|false)(?=\\s*\\|))\\b/i,\n        alias: 'type-declaration',\n        greedy: true\n      }, {\n        pattern: /(\\|\\s*)(?:null|false)\\b/i,\n        alias: 'type-declaration',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n        alias: 'static-context',\n        greedy: true\n      }, {\n        // yield from\n        pattern: /(\\byield\\s+)from\\b/i,\n        lookbehind: true\n      }, // `class` is always a keyword unlike other keywords\n      /\\bclass\\b/i, {\n        // https://www.php.net/manual/en/reserved.keywords.php\n        //\n        // keywords cannot be preceded by \"->\"\n        // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n        pattern: /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|match|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n        lookbehind: true\n      }],\n      'argument-name': {\n        pattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n        lookbehind: true\n      },\n      'class-name': [{\n        pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n        greedy: true\n      }, {\n        pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n        alias: 'type-declaration',\n        greedy: true\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n        alias: ['class-name-fully-qualified', 'type-declaration'],\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n        alias: 'static-context',\n        greedy: true\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n        alias: ['class-name-fully-qualified', 'static-context'],\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n        alias: ['class-name-fully-qualified', 'type-hint'],\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        alias: ['class-name-fully-qualified', 'return-type'],\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }],\n      constant: constant,\n      function: {\n        pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      property: {\n        pattern: /(->\\s*)\\w+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    };\n    var string_interpolation = {\n      pattern: /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    };\n    var string = [{\n      pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n      alias: 'nowdoc-string',\n      greedy: true,\n      inside: {\n        delimiter: {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            punctuation: /^<<<'?|[';]$/\n          }\n        }\n      }\n    }, {\n      pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n      alias: 'heredoc-string',\n      greedy: true,\n      inside: {\n        delimiter: {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            punctuation: /^<<<\"?|[\";]$/\n          }\n        },\n        interpolation: string_interpolation\n      }\n    }, {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      alias: 'backtick-quoted-string',\n      greedy: true\n    }, {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      alias: 'single-quoted-string',\n      greedy: true\n    }, {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      alias: 'double-quoted-string',\n      greedy: true,\n      inside: {\n        interpolation: string_interpolation\n      }\n    }];\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string,\n      attribute: {\n        pattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [{\n                pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                alias: 'class-name',\n                greedy: true,\n                lookbehind: true\n              }, {\n                pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                alias: ['class-name', 'class-name-fully-qualified'],\n                greedy: true,\n                lookbehind: true,\n                inside: {\n                  punctuation: /\\\\/\n                }\n              }],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|\\]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    });\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return;\n      }\n\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/gi;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n    });\n  })(Prism);\n}"],"sourceRoot":""}