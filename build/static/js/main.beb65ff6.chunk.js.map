{"version":3,"sources":["modules/baseComponent.js","routes.js","reducers/user.js","reducers/index.js","store.js","serviceWorker.js","index.js","managers/history.js","common/components/loaderAbsoluteCenter.js","common/components/showLoader.js"],"names":["BaseComponent","Component","Dashboard","withRouter","lazy","Routes","getPublicRoutes","exact","from","to","getPrivateRoutes","fallback","path","component","muiTheme","createTheme","history","this","connect","state","user","initialState","isLoggedIn","loginFailure","deviceId","sessionToken","loading","isForgotPasswordSuccess","combineReducers","action","type","loggerMiddleware","createLogger","createStore","rootReducer","applyMiddleware","thunkMiddleware","Boolean","window","location","hostname","match","SCMWebapp","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","createBrowserHistory","LoaderHolder","styled","div","LoaderComponent","props","Top","top","style","CircularProgress","showLoader"],"mappings":"sSAGqBA,E,yIAAsBC,a,iBCOrCC,EAAYC,YAChBC,gBAAK,kBAAM,yDAGPC,E,4MAGJC,gBAAkB,WAChB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,IAAIC,GAAG,Q,EAIlCC,iBAAmB,WACjB,OACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUJ,OAAK,EAACC,KAAK,IAAIC,GAAG,WAC5B,kBAAC,IAAD,CAAOF,OAAK,EAACK,KAAM,IAAKC,UAAWX,IACnC,kBAAC,IAAD,CAAOK,OAAK,EAACK,KAAM,SAAUC,UAAWX,IACxC,kBAAC,IAAD,CACEK,OAAK,EACLK,KAAM,kBACNC,UAAWX,IAEb,kBAAC,IAAD,CAAUK,OAAK,EAACC,KAAK,IAAIC,GAAG,S,uDArBpC,c,oBA2BA,WACE,OACE,kBAAC,IAAD,CAAkBK,SAAUC,eAC1B,kBAAC,IAAD,CAAQC,QAASA,KACPC,KAAKP,yB,GAhCFV,GA0CNkB,eAHS,SAACC,GACvB,MAAO,CAAEC,KAAMD,EAAMC,QAERF,CAAyBb,G,0BCxDpCgB,EAAe,CACfC,YAAY,EACZC,aAAc,KACdC,SAAU,KACVC,aAAc,KACdC,SAAS,EACTC,yBAAyB,GCHdC,kBAAgB,CAC3BR,KDIW,WAA6C,IAA/BD,EAA8B,uDAAtBE,EAAcQ,EAAQ,uCAG/C,OAFAA,EAAOC,KAEAX,KEPbY,EAAmBC,yBAETC,cACZC,EACAC,YACIC,IACAL,I,QCEYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCRN,SAASC,IACL,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUC,MAAOA,GACb,kBAAC,EAAD,CAAQ9B,UAAWR,MAMnCuC,IAASC,OAAO,kBAACH,EAAD,MAAeI,SAASC,eAAe,SD6GjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,gCEnInB,6CAaarC,EAAUsC,e,+ECTjBC,EAAeC,IAAOC,IAAV,oFAgBHC,EAVS,SAACC,GACvB,IAAIC,EAAM,MAGV,OAFGD,EAAME,MACPD,EAAMD,EAAME,KAEV,kBAACN,EAAD,CAAcO,MAAO,CAACD,IAAKD,IAC1B,kBAACG,EAAA,EAAD,QCbQ,SAASC,EAAWL,GAC/B,OACI,6BACKA,EAAMxC,MAAQ,kBAAC,EAAD,CAAQ0C,IAAKF,EAAME,MAAS,IANvD,oC","file":"static/js/main.beb65ff6.chunk.js","sourcesContent":["//base class\nimport { Component } from \"react\";\n\nexport default class BaseComponent extends Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n}\n","import React, { lazy, Suspense } from \"react\";\nimport { Router, Route, withRouter } from \"react-router-dom\";\nimport { Redirect, Switch } from \"react-router\";\nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\";\nimport { connect } from \"react-redux\";\nimport { history } from \"./managers/history\";\nimport BaseComponent from \"./modules/baseComponent\";\nimport { createTheme } from \"@material-ui/core/styles\";\nimport ShowLoader from \"./common/components/showLoader\";\n\nconst Dashboard = withRouter(\n  lazy(() => import(\"./modules/dashboard/dashboardComponent\"))\n);\n\nclass Routes extends BaseComponent {\n  componentDidMount() {}\n\n  getPublicRoutes = () => {\n    return (\n      <Switch>\n        <Redirect exact from=\"*\" to=\"/\" />\n      </Switch>\n    );\n  };\n  getPrivateRoutes = () => {\n    return (\n      <Suspense fallback={<ShowLoader />}>\n        <Switch>\n          <Redirect exact from=\"/\" to=\"/about\" />\n          <Route exact path={\"/\"} component={Dashboard} />\n          <Route exact path={\"/:menu\"} component={Dashboard} />\n          <Route\n            exact\n            path={\"/:menu/:subMenu\"}\n            component={Dashboard}\n          />\n          <Redirect exact from=\"*\" to=\"/\" />\n        </Switch>\n      </Suspense>\n    );\n  };\n\n  render() {\n    return (\n      <MuiThemeProvider muiTheme={createTheme()}>\n        <Router history={history}>\n          {true ? this.getPrivateRoutes() : this.getPublicRoutes()}\n        </Router>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { user: state.user };\n};\nexport default connect(mapStateToProps)(Routes);\n","let initialState = {\n    isLoggedIn: false,\n    loginFailure: null,\n    deviceId: null,\n    sessionToken: null,\n    loading: false,\n    isForgotPasswordSuccess: false\n};\nexport default function user(state = initialState, action) {\n    switch (action.type) {\n        default:\n            return state;\n    }\n}","import {combineReducers} from \"redux\";\nimport user from \"./user\";\n\nexport default combineReducers({\n    user\n});","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from \"./reducers/index\";\nconst loggerMiddleware = createLogger();\n\nexport default  createStore(\n    rootReducer,\n    applyMiddleware(\n        thunkMiddleware,\n        loggerMiddleware\n    )\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './routes';\nimport store from './store.js';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/styles/custom.css';\n\n\nfunction SCMWebapp() {\n    return (\n        <BrowserRouter>\n            <Provider store={store}>\n                <Routes component={Routes} />\n            </Provider>\n        </BrowserRouter>\n    );\n}\n\nReactDOM.render(<SCMWebapp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * Created by Ayush Kulshrestha on 18/09/2019.\n */\n\nimport { createBrowserHistory } from 'history';\n\n/**\n * The history library lets you easily manage session history anywhere JavaScript runs.\n * history abstracts away the differences in various environments and provides a minimal API\n * that lets you manage the history stack, navigate, and persist state between sessions.\n */\n\n\nexport const history = createBrowserHistory();\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst LoaderHolder = styled.div`\n  position: absolute;\n  left: 50%;\n  z-index: 10000;\n`;\n\nconst LoaderComponent = (props) => {\n  let Top = \"50%\";\n  if(props.top)\n    Top = props.top;\n  return (\n      <LoaderHolder style={{top: Top}} >\n       <CircularProgress/>\n      </LoaderHolder>\n  );\n};\nexport default LoaderComponent;\n","import React from 'react'\nimport Loader from './loaderAbsoluteCenter'\n\nexport default function showLoader(props) {\n    return (\n        <div>\n            {props.state ? <Loader top={props.top}/> : \"\" }\n        </div>\n    )\n}\n"],"sourceRoot":""}