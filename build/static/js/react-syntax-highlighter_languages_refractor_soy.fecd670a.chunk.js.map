{"version":3,"sources":["../node_modules/refractor/lang/soy.js","../node_modules/refractor/lang/markup-templating.js"],"names":["refractorMarkupTemplating","soy","Prism","register","stringPattern","numberPattern","languages","comment","pattern","lookbehind","greedy","alias","inside","punctuation","parameter","keyword","delimiter","property","variable","string","number","function","boolean","operator","hooks","add","env","soyLitteralMode","buildPlaceholders","match","tokenizePlaceholders","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","placeholder","i","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_soy.fecd670a.chunk.js","sourcesContent":["'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = soy;\nsoy.displayName = 'soy';\nsoy.aliases = [];\n\nfunction soy(Prism) {\n  Prism.register(refractorMarkupTemplating);\n\n  (function (Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;\n    Prism.languages.soy = {\n      comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n        pattern: /(\\s)\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      'command-arg': {\n        pattern: /(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [{\n        pattern: /(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n        lookbehind: true\n      }, /\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/],\n      delimiter: {\n        pattern: /^\\{+\\/?|\\/?\\}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [/\\w+(?=\\()/, {\n        pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n        lookbehind: true\n      }],\n      boolean: /\\b(?:true|false)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    }; // Tokenize all inline Soy expressions\n\n    Prism.hooks.add('before-tokenize', function (env) {\n      var soyPattern = /\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g;\n      var soyLitteralStart = '{literal}';\n      var soyLitteralEnd = '{/literal}';\n      var soyLitteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {\n        // Soy tags inside {literal} block are ignored\n        if (match === soyLitteralEnd) {\n          soyLitteralMode = false;\n        }\n\n        if (!soyLitteralMode) {\n          if (match === soyLitteralStart) {\n            soyLitteralMode = true;\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');\n    });\n  })(Prism);\n}","'use strict';\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\n\nfunction markupTemplating(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n\n\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n\n\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n\n              var token = tokens[i];\n\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n\n                  replacement.push(middle);\n\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content);\n              }\n            }\n\n            return tokens;\n          }\n\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}"],"sourceRoot":""}