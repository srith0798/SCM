{"version":3,"sources":["../node_modules/refractor/lang/javadoc.js","../node_modules/refractor/lang/javadoclike.js","../node_modules/refractor/lang/java.js"],"names":["refractorJava","refractorJavadoclike","javadoc","Prism","register","codeLinePattern","memberReference","source","reference","replace","languages","extend","insertBefore","pattern","RegExp","lookbehind","inside","function","field","namespace","punctuation","keyword","java","code","alias","line","tag","markup","entity","javadoclike","addSupport","module","exports","displayName","aliases","javaDocLike","parameter","Object","defineProperty","value","docLanguage","forEach","lang","callback","grammar","token","definition","Array","isArray","i","l","length","docCommentSupport","rest","keywords","classNamePrefix","className","clike","number","operator","greedy","annotation","generics"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_javadoc.de0823fc.chunk.js","sourcesContent":["'use strict';\n\nvar refractorJava = require('./java.js');\n\nvar refractorJavadoclike = require('./javadoclike.js');\n\nmodule.exports = javadoc;\njavadoc.displayName = 'javadoc';\njavadoc.aliases = [];\n\nfunction javadoc(Prism) {\n  Prism.register(refractorJava);\n  Prism.register(refractorJavadoclike);\n\n  (function (Prism) {\n    var codeLinePattern = /(^(?:[\\t ]*(?:\\*\\s*)*))[^*\\s].*$/m;\n    var memberReference = /#\\s*\\w+(?:\\s*\\([^()]*\\))?/.source;\n    var reference = /(?:\\b[a-zA-Z]\\w+\\s*\\.\\s*)*\\b[A-Z]\\w*(?:\\s*<mem>)?|<mem>/.source.replace(/<mem>/g, function () {\n      return memberReference;\n    });\n    Prism.languages.javadoc = Prism.languages.extend('javadoclike', {});\n    Prism.languages.insertBefore('javadoc', 'keyword', {\n      reference: {\n        pattern: RegExp(/(@(?:exception|throws|see|link|linkplain|value)\\s+(?:\\*\\s*)?)/.source + '(?:' + reference + ')'),\n        lookbehind: true,\n        inside: {\n          function: {\n            pattern: /(#\\s*)\\w+(?=\\s*\\()/,\n            lookbehind: true\n          },\n          field: {\n            pattern: /(#\\s*)\\w+/,\n            lookbehind: true\n          },\n          namespace: {\n            pattern: /\\b(?:[a-z]\\w*\\s*\\.\\s*)+/,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          'class-name': /\\b[A-Z]\\w*/,\n          keyword: Prism.languages.java.keyword,\n          punctuation: /[#()[\\],.]/\n        }\n      },\n      'class-name': {\n        // @param <T> the first generic type parameter\n        pattern: /(@param\\s+)<[A-Z]\\w*>/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.<>]/\n        }\n      },\n      'code-section': [{\n        pattern: /(\\{@code\\s+(?!\\s))(?:[^\\s{}]|\\s+(?![\\s}])|\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\})+(?=\\s*\\})/,\n        lookbehind: true,\n        inside: {\n          code: {\n            // there can't be any HTML inside of {@code} tags\n            pattern: codeLinePattern,\n            lookbehind: true,\n            inside: Prism.languages.java,\n            alias: 'language-java'\n          }\n        }\n      }, {\n        pattern: /(<(code|pre|tt)>(?!<code>)\\s*)\\S(?:\\S|\\s+\\S)*?(?=\\s*<\\/\\2>)/,\n        lookbehind: true,\n        inside: {\n          line: {\n            pattern: codeLinePattern,\n            lookbehind: true,\n            inside: {\n              // highlight HTML tags and entities\n              tag: Prism.languages.markup.tag,\n              entity: Prism.languages.markup.entity,\n              code: {\n                // everything else is Java code\n                pattern: /.+/,\n                inside: Prism.languages.java,\n                alias: 'language-java'\n              }\n            }\n          }\n        }\n      }],\n      tag: Prism.languages.markup.tag,\n      entity: Prism.languages.markup.entity\n    });\n    Prism.languages.javadoclike.addSupport('java', Prism.languages.javadoc);\n  })(Prism);\n}","'use strict';\n\nmodule.exports = javadoclike;\njavadoclike.displayName = 'javadoclike';\njavadoclike.aliases = [];\n\nfunction javadoclike(Prism) {\n  ;\n\n  (function (Prism) {\n    var javaDocLike = Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    };\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment';\n      var grammar = Prism.languages[lang];\n\n      if (!grammar) {\n        return;\n      }\n\n      var token = grammar[tokenName];\n\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {};\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        };\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n        token = grammar[tokenName];\n      }\n\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        };\n      }\n\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            };\n          }\n\n          callback(token[i]);\n        }\n      } else {\n        callback(token);\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n\n\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages];\n      }\n\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {};\n          }\n\n          pattern.inside.rest = docLanguage;\n        });\n      });\n    }\n\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    });\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n  })(Prism);\n}","'use strict';\n\nmodule.exports = java;\njava.displayName = 'java';\njava.aliases = [];\n\nfunction java(Prism) {\n  ;\n\n  (function (Prism) {\n    var keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/; // full package (optional) + parent classes (optional)\n\n    var classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source; // based on the java naming conventions\n\n    var className = {\n      pattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /\\./\n      }\n    };\n    Prism.languages.java = Prism.languages.extend('clike', {\n      'class-name': [className, {\n        // variables and parameters\n        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n        pattern: RegExp(classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n        lookbehind: true,\n        inside: className.inside\n      }],\n      keyword: keywords,\n      function: [Prism.languages.clike.function, {\n        pattern: /(::\\s*)[a-z_]\\w*/,\n        lookbehind: true\n      }],\n      number: /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('java', 'string', {\n      'triple-quoted-string': {\n        // http://openjdk.java.net/jeps/355#Description\n        pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n        greedy: true,\n        alias: 'string'\n      }\n    });\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      generics: {\n        pattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      },\n      namespace: {\n        pattern: RegExp(/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(/<keyword>/g, function () {\n          return keywords.source;\n        })),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    });\n  })(Prism);\n}"],"sourceRoot":""}