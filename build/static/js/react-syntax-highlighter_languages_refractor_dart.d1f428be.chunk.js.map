{"version":3,"sources":["../node_modules/refractor/lang/dart.js"],"names":["dart","Prism","keywords","packagePrefix","source","className","pattern","RegExp","lookbehind","inside","namespace","punctuation","languages","extend","string","greedy","keyword","operator","insertBefore","metadata","alias","generics","module","exports","displayName","aliases"],"mappings":"wHAMA,SAASA,EAAKC,IAGZ,SAAWA,GACT,IAAIC,EAAW,CAAC,2BAA4B,8WAExCC,EAAgB,uDAAuDC,OAEvEC,EAAY,CACdC,QAASC,OAAOJ,EAAgB,gCAAgCC,QAChEI,YAAY,EACZC,OAAQ,CACNC,UAAW,CACTJ,QAAS,2CACTG,OAAQ,CACNE,YAAa,SAKrBV,EAAMW,UAAUZ,KAAOC,EAAMW,UAAUC,OAAO,QAAS,CACrDC,OAAQ,CAAC,CACPR,QAAS,wBACTS,QAAQ,GACP,CACDT,QAAS,qCACTS,QAAQ,IAEV,aAAc,CAACV,EAAW,CAGxBC,QAASC,OAAOJ,EAAgB,+BAA+BC,QAC/DI,YAAY,EACZC,OAAQJ,EAAUI,SAEpBO,QAASd,EACTe,SAAU,mFAEZhB,EAAMW,UAAUM,aAAa,OAAQ,WAAY,CAC/CC,SAAU,CACRb,QAAS,OACTc,MAAO,YAGXnB,EAAMW,UAAUM,aAAa,OAAQ,aAAc,CACjDG,SAAU,CACRf,QAAS,sEACTG,OAAQ,CACN,aAAcJ,EACdW,QAASd,EACTS,YAAa,YACbM,SAAU,YAhDlB,CAoDGhB,GA3DLqB,EAAOC,QAAUvB,EACjBA,EAAKwB,YAAc,OACnBxB,EAAKyB,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_dart.d1f428be.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = dart;\ndart.displayName = 'dart';\ndart.aliases = [];\n\nfunction dart(Prism) {\n  ;\n\n  (function (Prism) {\n    var keywords = [/\\b(?:async|sync|yield)\\*/, /\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extension|external|extends|factory|final|finally|for|get|hide|if|implements|interface|import|in|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/]; // Handles named imports, such as http.Client\n\n    var packagePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source; // based on the dart naming conventions\n\n    var className = {\n      pattern: RegExp(packagePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        }\n      }\n    };\n    Prism.languages.dart = Prism.languages.extend('clike', {\n      string: [{\n        pattern: /r?(\"\"\"|''')[\\s\\S]*?\\1/,\n        greedy: true\n      }, {\n        pattern: /r?([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n      }],\n      'class-name': [className, {\n        // variables and parameters\n        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n        pattern: RegExp(packagePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n        lookbehind: true,\n        inside: className.inside\n      }],\n      keyword: keywords,\n      operator: /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n    });\n    Prism.languages.insertBefore('dart', 'function', {\n      metadata: {\n        pattern: /@\\w+/,\n        alias: 'symbol'\n      }\n    });\n    Prism.languages.insertBefore('dart', 'class-name', {\n      generics: {\n        pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      }\n    });\n  })(Prism);\n}"],"sourceRoot":""}