{"version":3,"sources":["../node_modules/refractor/lang/glsl.js","../node_modules/refractor/lang/c.js"],"names":["refractorC","glsl","Prism","register","languages","extend","keyword","module","exports","displayName","aliases","c","comment","pattern","greedy","string","lookbehind","function","number","operator","insertBefore","char","macro","alias","inside","directive","punctuation","expression","constant"],"mappings":"2HAEA,IAAIA,EAAa,EAAQ,KAMzB,SAASC,EAAKC,GACZA,EAAMC,SAASH,GACfE,EAAME,UAAUH,KAAOC,EAAME,UAAUC,OAAO,IAAK,CACjDC,QAAS,ghCAPbC,EAAOC,QAAUP,EACjBA,EAAKQ,YAAc,OACnBR,EAAKS,QAAU,I,iCCAf,SAASC,EAAET,GACTA,EAAME,UAAUO,EAAIT,EAAME,UAAUC,OAAO,QAAS,CAClDO,QAAS,CACPC,QAAS,sEACTC,QAAQ,GAEVC,OAAQ,CAENF,QAAS,sCACTC,QAAQ,GAEV,aAAc,CACZD,QAAS,mFACTG,YAAY,GAEdV,QAAS,oVACTW,SAAU,wBACVC,OAAQ,oHACRC,SAAU,oDAEZjB,EAAME,UAAUgB,aAAa,IAAK,SAAU,CAC1CC,KAAM,CAEJR,QAAS,2CACTC,QAAQ,KAGZZ,EAAME,UAAUgB,aAAa,IAAK,SAAU,CAC1CE,MAAO,CAGLT,QAAS,4FACTG,YAAY,EACZF,QAAQ,EACRS,MAAO,WACPC,OAAQ,CACNT,OAAQ,CAAC,CAEPF,QAAS,2BACTG,YAAY,GACXd,EAAME,UAAUO,EAAU,QAC7BU,KAAMnB,EAAME,UAAUO,EAAQ,KAC9BC,QAASV,EAAME,UAAUO,EAAW,QACpC,aAAc,CAAC,CACbE,QAAS,+BACTG,YAAY,GACX,CACDH,QAAS,+BACTG,YAAY,EACZO,MAAO,aAGTE,UAAW,CACTZ,QAAS,gBACTG,YAAY,EACZO,MAAO,WAET,iBAAkB,KAClBG,YAAa,kBACbC,WAAY,CACVd,QAAS,YACTW,OAAQtB,EAAME,UAAUO,OAKhCT,EAAME,UAAUgB,aAAa,IAAK,WAAY,CAE5CQ,SAAU,sIAEL1B,EAAME,UAAUO,EAAW,QA1EpCJ,EAAOC,QAAUG,EACjBA,EAAEF,YAAc,IAChBE,EAAED,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_glsl.317b49f6.chunk.js","sourcesContent":["'use strict';\n\nvar refractorC = require('./c.js');\n\nmodule.exports = glsl;\nglsl.displayName = 'glsl';\nglsl.aliases = [];\n\nfunction glsl(Prism) {\n  Prism.register(refractorC);\n  Prism.languages.glsl = Prism.languages.extend('c', {\n    keyword: /\\b(?:active|asm|atomic_uint|attribute|[ibdu]?vec[234]|bool|break|buffer|case|cast|centroid|class|coherent|common|const|continue|d?mat[234](?:x[234])?|default|discard|do|double|else|enum|extern|external|false|filter|fixed|flat|float|for|fvec[234]|goto|half|highp|hvec[234]|[iu]?sampler2DMS(?:Array)?|[iu]?sampler2DRect|[iu]?samplerBuffer|[iu]?samplerCube|[iu]?samplerCubeArray|[iu]?sampler[123]D|[iu]?sampler[12]DArray|[iu]?image2DMS(?:Array)?|[iu]?image2DRect|[iu]?imageBuffer|[iu]?imageCube|[iu]?imageCubeArray|[iu]?image[123]D|[iu]?image[12]DArray|if|in|inline|inout|input|int|interface|invariant|layout|long|lowp|mediump|namespace|noinline|noperspective|out|output|partition|patch|precise|precision|public|readonly|resource|restrict|return|sample|sampler[12]DArrayShadow|sampler[12]DShadow|sampler2DRectShadow|sampler3DRect|samplerCubeArrayShadow|samplerCubeShadow|shared|short|sizeof|smooth|static|struct|subroutine|superp|switch|template|this|true|typedef|uint|uniform|union|unsigned|using|varying|void|volatile|while|writeonly)\\b/\n  });\n}","'use strict';\n\nmodule.exports = c;\nc.displayName = 'c';\nc.aliases = [];\n\nfunction c(Prism) {\n  Prism.languages.c = Prism.languages.extend('clike', {\n    comment: {\n      pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      greedy: true\n    },\n    string: {\n      // https://en.cppreference.com/w/c/language/string_literal\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n  });\n  Prism.languages.insertBefore('c', 'string', {\n    char: {\n      // https://en.cppreference.com/w/c/language/character_constant\n      pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('c', 'string', {\n    macro: {\n      // allow for multiline macro definitions\n      // spaces after the # character compile fine with gcc\n      pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property',\n      inside: {\n        string: [{\n          // highlight the path of the include statement as a string\n          pattern: /^(#\\s*include\\s*)<[^>]+>/,\n          lookbehind: true\n        }, Prism.languages.c['string']],\n        char: Prism.languages.c['char'],\n        comment: Prism.languages.c['comment'],\n        'macro-name': [{\n          pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n          lookbehind: true\n        }, {\n          pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n          lookbehind: true,\n          alias: 'function'\n        }],\n        // highlight macro directives as keywords\n        directive: {\n          pattern: /^(#\\s*)[a-z]+/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'directive-hash': /^#/,\n        punctuation: /##|\\\\(?=[\\r\\n])/,\n        expression: {\n          pattern: /\\S[\\s\\S]*/,\n          inside: Prism.languages.c\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('c', 'function', {\n    // highlight predefined macros as constants\n    constant: /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n  });\n  delete Prism.languages.c['boolean'];\n}"],"sourceRoot":""}