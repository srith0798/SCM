{"version":3,"sources":["../node_modules/refractor/lang/phpdoc.js","../node_modules/refractor/lang/markup-templating.js","../node_modules/refractor/lang/javadoclike.js","../node_modules/refractor/lang/php.js"],"names":["refractorPhp","refractorJavadoclike","phpdoc","Prism","register","typeExpression","source","languages","extend","parameter","pattern","RegExp","lookbehind","insertBefore","inside","keyword","punctuation","javadoclike","addSupport","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","buildPlaceholders","value","env","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","tokenizePlaceholders","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat","javaDocLike","defineProperty","docLanguage","forEach","lang","callback","definition","alias","Array","isArray","l","docCommentSupport","rest","refractorMarkupTemplating","php","comment","constant","greedy","number","operator","delimiter","variable","package","function","property","string_interpolation","string","interpolation","attribute","hooks","add","test"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_phpdoc.f17b92a3.chunk.js","sourcesContent":["'use strict';\n\nvar refractorPhp = require('./php.js');\n\nvar refractorJavadoclike = require('./javadoclike.js');\n\nmodule.exports = phpdoc;\nphpdoc.displayName = 'phpdoc';\nphpdoc.aliases = [];\n\nfunction phpdoc(Prism) {\n  Prism.register(refractorPhp);\n  Prism.register(refractorJavadoclike);\n\n  (function (Prism) {\n    var typeExpression = /(?:\\b[a-zA-Z]\\w*|[|\\\\[\\]])+/.source;\n    Prism.languages.phpdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        pattern: RegExp('(@(?:global|param|property(?:-read|-write)?|var)\\\\s+(?:' + typeExpression + '\\\\s+)?)\\\\$\\\\w+'),\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('phpdoc', 'keyword', {\n      'class-name': [{\n        pattern: RegExp('(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\\\s+)' + typeExpression),\n        lookbehind: true,\n        inside: {\n          keyword: /\\b(?:callback|resource|boolean|integer|double|object|string|array|false|float|mixed|bool|null|self|true|void|int)\\b/,\n          punctuation: /[|\\\\[\\]()]/\n        }\n      }]\n    });\n    Prism.languages.javadoclike.addSupport('php', Prism.languages.phpdoc);\n  })(Prism);\n}","'use strict';\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\n\nfunction markupTemplating(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n\n\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n\n\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n\n              var token = tokens[i];\n\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n\n                  replacement.push(middle);\n\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content);\n              }\n            }\n\n            return tokens;\n          }\n\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}","'use strict';\n\nmodule.exports = javadoclike;\njavadoclike.displayName = 'javadoclike';\njavadoclike.aliases = [];\n\nfunction javadoclike(Prism) {\n  ;\n\n  (function (Prism) {\n    var javaDocLike = Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    };\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment';\n      var grammar = Prism.languages[lang];\n\n      if (!grammar) {\n        return;\n      }\n\n      var token = grammar[tokenName];\n\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {};\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        };\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n        token = grammar[tokenName];\n      }\n\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        };\n      }\n\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            };\n          }\n\n          callback(token[i]);\n        }\n      } else {\n        callback(token);\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n\n\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages];\n      }\n\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {};\n          }\n\n          pattern.inside.rest = docLanguage;\n        });\n      });\n    }\n\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    });\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n  })(Prism);\n}","'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = php;\nphp.displayName = 'php';\nphp.aliases = [];\n\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */\n  ;\n\n  (function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/;\n    var constant = [{\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: 'boolean'\n    }, {\n      pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n      greedy: true,\n      lookbehind: true\n    }, /\\b(?:null)\\b/i, /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/];\n    var number = /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i;\n    var operator = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;\n    var punctuation = /[{}\\[\\](),:;]/;\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?=\\{))/i,\n      package: {\n        pattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      'class-name-definition': {\n        pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'function-definition': {\n        pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      keyword: [{\n        pattern: /(\\(\\s*)\\b(?:bool|boolean|int|integer|float|string|object|array)\\b(?=\\s*\\))/i,\n        alias: 'type-casting',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*)\\b(?:bool|int|float|string|object|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*[\\w|]\\|\\s*)(?:null|false)\\b(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?[\\w|]\\|\\s*)(?:null|false)\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|iterable|(?:null|false)(?=\\s*\\|))\\b/i,\n        alias: 'type-declaration',\n        greedy: true\n      }, {\n        pattern: /(\\|\\s*)(?:null|false)\\b/i,\n        alias: 'type-declaration',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n        alias: 'static-context',\n        greedy: true\n      }, {\n        // yield from\n        pattern: /(\\byield\\s+)from\\b/i,\n        lookbehind: true\n      }, // `class` is always a keyword unlike other keywords\n      /\\bclass\\b/i, {\n        // https://www.php.net/manual/en/reserved.keywords.php\n        //\n        // keywords cannot be preceded by \"->\"\n        // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n        pattern: /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|match|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n        lookbehind: true\n      }],\n      'argument-name': {\n        pattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n        lookbehind: true\n      },\n      'class-name': [{\n        pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n        greedy: true\n      }, {\n        pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n        alias: 'type-declaration',\n        greedy: true\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n        alias: ['class-name-fully-qualified', 'type-declaration'],\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n        alias: 'static-context',\n        greedy: true\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n        alias: ['class-name-fully-qualified', 'static-context'],\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n        alias: ['class-name-fully-qualified', 'type-hint'],\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        alias: ['class-name-fully-qualified', 'return-type'],\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }],\n      constant: constant,\n      function: {\n        pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      property: {\n        pattern: /(->\\s*)\\w+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    };\n    var string_interpolation = {\n      pattern: /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    };\n    var string = [{\n      pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n      alias: 'nowdoc-string',\n      greedy: true,\n      inside: {\n        delimiter: {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            punctuation: /^<<<'?|[';]$/\n          }\n        }\n      }\n    }, {\n      pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n      alias: 'heredoc-string',\n      greedy: true,\n      inside: {\n        delimiter: {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            punctuation: /^<<<\"?|[\";]$/\n          }\n        },\n        interpolation: string_interpolation\n      }\n    }, {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      alias: 'backtick-quoted-string',\n      greedy: true\n    }, {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      alias: 'single-quoted-string',\n      greedy: true\n    }, {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      alias: 'double-quoted-string',\n      greedy: true,\n      inside: {\n        interpolation: string_interpolation\n      }\n    }];\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string,\n      attribute: {\n        pattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [{\n                pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                alias: 'class-name',\n                greedy: true,\n                lookbehind: true\n              }, {\n                pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                alias: ['class-name', 'class-name-fully-qualified'],\n                greedy: true,\n                lookbehind: true,\n                inside: {\n                  punctuation: /\\\\/\n                }\n              }],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|\\]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    });\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return;\n      }\n\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/gi;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n    });\n  })(Prism);\n}"],"sourceRoot":""}