{"version":3,"sources":["../node_modules/refractor/lang/scala.js","../node_modules/refractor/lang/java.js"],"names":["refractorJava","scala","Prism","register","languages","extend","pattern","greedy","alias","string","keyword","number","builtin","symbol","module","exports","displayName","aliases","java","keywords","classNamePrefix","source","className","RegExp","lookbehind","inside","namespace","punctuation","function","clike","operator","insertBefore","annotation","generics","replace"],"mappings":"4HAEA,IAAIA,EAAgB,EAAQ,KAM5B,SAASC,EAAMC,GACbA,EAAMC,SAASH,GACfE,EAAME,UAAUH,MAAQC,EAAME,UAAUC,OAAO,OAAQ,CACrD,uBAAwB,CACtBC,QAAS,iBACTC,QAAQ,EACRC,MAAO,UAETC,OAAQ,CACNH,QAAS,kCACTC,QAAQ,GAEVG,QAAS,qPACTC,OAAQ,0EACRC,QAAS,8FACTC,OAAQ,yBAEHX,EAAME,UAAUH,MAAM,qBACtBC,EAAME,UAAUH,MAAgB,SAtBzCa,EAAOC,QAAUd,EACjBA,EAAMe,YAAc,QACpBf,EAAMgB,QAAU,I,iCCAhB,SAASC,EAAKhB,IAGZ,SAAWA,GACT,IAAIiB,EAAW,idAEXC,EAAkB,uDAAuDC,OAEzEC,EAAY,CACdhB,QAASiB,OAAOH,EAAkB,gCAAgCC,QAClEG,YAAY,EACZC,OAAQ,CACNC,UAAW,CACTpB,QAAS,2CACTmB,OAAQ,CACNE,YAAa,OAGjBA,YAAa,OAGjBzB,EAAME,UAAUc,KAAOhB,EAAME,UAAUC,OAAO,QAAS,CACrD,aAAc,CAACiB,EAAW,CAGxBhB,QAASiB,OAAOH,EAAkB,+BAA+BC,QACjEG,YAAY,EACZC,OAAQH,EAAUG,SAEpBf,QAASS,EACTS,SAAU,CAAC1B,EAAME,UAAUyB,MAAMD,SAAU,CACzCtB,QAAS,mBACTkB,YAAY,IAEdb,OAAQ,8IACRmB,SAAU,CACRxB,QAAS,wEACTkB,YAAY,KAGhBtB,EAAME,UAAU2B,aAAa,OAAQ,SAAU,CAC7C,uBAAwB,CAEtBzB,QAAS,iDACTC,QAAQ,EACRC,MAAO,YAGXN,EAAME,UAAU2B,aAAa,OAAQ,aAAc,CACjDC,WAAY,CACV1B,QAAS,+BACTkB,YAAY,EACZhB,MAAO,eAETyB,SAAU,CACR3B,QAAS,kGACTmB,OAAQ,CACN,aAAcH,EACdZ,QAASS,EACTQ,YAAa,YACbG,SAAU,UAGdJ,UAAW,CACTpB,QAASiB,OAAO,qJAAqJF,OAAOa,QAAQ,cAAc,WAChM,OAAOf,EAASE,WAElBG,YAAY,EACZC,OAAQ,CACNE,YAAa,SAlErB,CAsEGzB,GA7ELY,EAAOC,QAAUG,EACjBA,EAAKF,YAAc,OACnBE,EAAKD,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_scala.1cd4a190.chunk.js","sourcesContent":["'use strict';\n\nvar refractorJava = require('./java.js');\n\nmodule.exports = scala;\nscala.displayName = 'scala';\nscala.aliases = [];\n\nfunction scala(Prism) {\n  Prism.register(refractorJava);\n  Prism.languages.scala = Prism.languages.extend('java', {\n    'triple-quoted-string': {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    string: {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    keyword: /<-|=>|\\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\\b/,\n    number: /\\b0x(?:[\\da-f]*\\.)?[\\da-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e\\d+)?[dfl]?/i,\n    builtin: /\\b(?:String|Int|Long|Short|Byte|Boolean|Double|Float|Char|Any|AnyRef|AnyVal|Unit|Nothing)\\b/,\n    symbol: /'[^\\d\\s\\\\]\\w*/\n  });\n  delete Prism.languages.scala['class-name'];\n  delete Prism.languages.scala['function'];\n}","'use strict';\n\nmodule.exports = java;\njava.displayName = 'java';\njava.aliases = [];\n\nfunction java(Prism) {\n  ;\n\n  (function (Prism) {\n    var keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/; // full package (optional) + parent classes (optional)\n\n    var classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source; // based on the java naming conventions\n\n    var className = {\n      pattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /\\./\n      }\n    };\n    Prism.languages.java = Prism.languages.extend('clike', {\n      'class-name': [className, {\n        // variables and parameters\n        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n        pattern: RegExp(classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n        lookbehind: true,\n        inside: className.inside\n      }],\n      keyword: keywords,\n      function: [Prism.languages.clike.function, {\n        pattern: /(::\\s*)[a-z_]\\w*/,\n        lookbehind: true\n      }],\n      number: /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('java', 'string', {\n      'triple-quoted-string': {\n        // http://openjdk.java.net/jeps/355#Description\n        pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n        greedy: true,\n        alias: 'string'\n      }\n    });\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      generics: {\n        pattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      },\n      namespace: {\n        pattern: RegExp(/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(/<keyword>/g, function () {\n          return keywords.source;\n        })),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    });\n  })(Prism);\n}"],"sourceRoot":""}