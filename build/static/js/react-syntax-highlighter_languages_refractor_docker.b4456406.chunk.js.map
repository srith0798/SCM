{"version":3,"sources":["../node_modules/refractor/lang/docker.js"],"names":["docker","Prism","spaceAfterBackSlash","source","space","replace","string","option","stringRule","pattern","RegExp","greedy","commentRule","lookbehind","re","flags","languages","instruction","inside","options","property","operator","punctuation","keyword","comment","variable","dockerfile","module","exports","displayName","aliases"],"mappings":"wHAMA,SAASA,EAAOC,IAGd,SAAWA,GAGT,IAAIC,EAAsB,sDAAsDC,OAE5EC,EAAQ,0CAA0CD,OAAOE,QAAQ,YAAY,WAC/E,OAAOH,KAELI,EAAS,0EAA0EH,OACnFI,EAAS,8CAA8CJ,OAAOE,QAAQ,UAAU,WAClF,OAAOC,KAELE,EAAa,CACfC,QAASC,OAAOJ,GAChBK,QAAQ,GAENC,EAAc,CAChBH,QAAS,gBACTI,YAAY,EACZF,QAAQ,GAQV,SAASG,EAAGX,EAAQY,GAMlB,OALAZ,EAASA,EAAOE,QAAQ,UAAU,WAChC,OAAOE,KACNF,QAAQ,SAAS,WAClB,OAAOD,KAEFM,OAAOP,EAAQY,GAGxBd,EAAMe,UAAUhB,OAAS,CACvBiB,YAAa,CACXR,QAAS,kNACTI,YAAY,EACZF,QAAQ,EACRO,OAAQ,CACNC,QAAS,CACPV,QAASK,EAAG,gDAAgDX,OAAQ,KACpEU,YAAY,EACZF,QAAQ,EACRO,OAAQ,CACNE,SAAU,CACRX,QAAS,iBACTI,YAAY,GAEdP,OAAQ,CAACE,EAAY,CACnBC,QAAS,8BACTI,YAAY,IAEdQ,SAAU,OACVC,YAAa,MAGjBC,QAAS,CAAC,CAERd,QAASK,EAAG,iEAAiEX,OAAQ,KACrFU,YAAY,EACZF,QAAQ,GACP,CAEDF,QAASK,EAAG,iEAAiEX,OAAQ,KACrFU,YAAY,EACZF,QAAQ,GACP,CAEDF,QAASK,EAAG,oBAAoBX,OAAQ,KACxCU,YAAY,EACZF,QAAQ,GACP,CACDF,QAAS,OACTE,QAAQ,IAEVa,QAASZ,EACTN,OAAQE,EACRiB,SAAU,2BACVJ,SAAU,SAGdG,QAASZ,GAEXX,EAAMe,UAAUU,WAAazB,EAAMe,UAAUhB,OAtF/C,CAuFGC,GA9FL0B,EAAOC,QAAU5B,EACjBA,EAAO6B,YAAc,SACrB7B,EAAO8B,QAAU,CAAC","file":"static/js/react-syntax-highlighter_languages_refractor_docker.b4456406.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = docker;\ndocker.displayName = 'docker';\ndocker.aliases = ['dockerfile'];\n\nfunction docker(Prism) {\n  ;\n\n  (function (Prism) {\n    // Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\n    // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\n    var spaceAfterBackSlash = /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source; // At least one space, comment, or line break\n\n    var space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(/<SP_BS>/g, function () {\n      return spaceAfterBackSlash;\n    });\n    var string = /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/.source;\n    var option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(/<STR>/g, function () {\n      return string;\n    });\n    var stringRule = {\n      pattern: RegExp(string),\n      greedy: true\n    };\n    var commentRule = {\n      pattern: /(^[ \\t]*)#.*/m,\n      lookbehind: true,\n      greedy: true\n    };\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n\n    function re(source, flags) {\n      source = source.replace(/<OPT>/g, function () {\n        return option;\n      }).replace(/<SP>/g, function () {\n        return space;\n      });\n      return RegExp(source, flags);\n    }\n\n    Prism.languages.docker = {\n      instruction: {\n        pattern: /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          options: {\n            pattern: re(/(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source, 'i'),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              property: {\n                pattern: /(^|\\s)--[\\w-]+/,\n                lookbehind: true\n              },\n              string: [stringRule, {\n                pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n                lookbehind: true\n              }],\n              operator: /\\\\$/m,\n              punctuation: /=/\n            }\n          },\n          keyword: [{\n            // https://docs.docker.com/engine/reference/builder/#healthcheck\n            pattern: re(/(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/.source, 'i'),\n            lookbehind: true,\n            greedy: true\n          }, {\n            // https://docs.docker.com/engine/reference/builder/#from\n            pattern: re(/(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/.source, 'i'),\n            lookbehind: true,\n            greedy: true\n          }, {\n            // https://docs.docker.com/engine/reference/builder/#onbuild\n            pattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\n            lookbehind: true,\n            greedy: true\n          }, {\n            pattern: /^\\w+/,\n            greedy: true\n          }],\n          comment: commentRule,\n          string: stringRule,\n          variable: /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n          operator: /\\\\$/m\n        }\n      },\n      comment: commentRule\n    };\n    Prism.languages.dockerfile = Prism.languages.docker;\n  })(Prism);\n}"],"sourceRoot":""}