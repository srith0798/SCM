{"version":3,"sources":["../node_modules/refractor/lang/jsdoc.js","../node_modules/refractor/lang/javadoclike.js","../node_modules/refractor/lang/typescript.js"],"names":["refractorJavadoclike","refractorTypescript","jsdoc","Prism","register","javascript","languages","type","source","parameterPrefix","extend","parameter","pattern","RegExp","lookbehind","inside","punctuation","insertBefore","code","alias","replace","string","number","boolean","keyword","typescript","operator","example","javadoclike","addSupport","module","exports","displayName","aliases","javaDocLike","Object","defineProperty","value","docLanguage","forEach","lang","callback","grammar","token","definition","Array","isArray","i","l","length","docCommentSupport","rest","greedy","builtin","push","typeInside","decorator","at","function","generic","ts"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_jsdoc.e8006187.chunk.js","sourcesContent":["'use strict';\n\nvar refractorJavadoclike = require('./javadoclike.js');\n\nvar refractorTypescript = require('./typescript.js');\n\nmodule.exports = jsdoc;\njsdoc.displayName = 'jsdoc';\njsdoc.aliases = [];\n\nfunction jsdoc(Prism) {\n  Prism.register(refractorJavadoclike);\n  Prism.register(refractorTypescript);\n\n  (function (Prism) {\n    var javascript = Prism.languages.javascript;\n    var type = /\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})+\\}/.source;\n    var parameterPrefix = '(@(?:param|arg|argument|property)\\\\s+(?:' + type + '\\\\s+)?)';\n    Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        // @param {string} foo - foo bar\n        pattern: RegExp(parameterPrefix + /(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?=\\s|$)/.source),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    });\n    Prism.languages.insertBefore('jsdoc', 'keyword', {\n      'optional-parameter': {\n        // @param {string} [baz.foo=\"bar\"] foo bar\n        pattern: RegExp(parameterPrefix + /\\[(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?:=[^[\\]]+)?\\](?=\\s|$)/.source),\n        lookbehind: true,\n        inside: {\n          parameter: {\n            pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n            lookbehind: true,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          code: {\n            pattern: /(=)[\\s\\S]*(?=\\]$)/,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          },\n          punctuation: /[=[\\]]/\n        }\n      },\n      'class-name': [{\n        pattern: RegExp(/(@(?:augments|extends|class|interface|memberof!?|template|this|typedef)\\s+(?:<TYPE>\\s+)?)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/.source.replace(/<TYPE>/g, function () {\n          return type;\n        })),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }, {\n        pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n        lookbehind: true,\n        inside: {\n          string: javascript.string,\n          number: javascript.number,\n          boolean: javascript.boolean,\n          keyword: Prism.languages.typescript.keyword,\n          operator: /=>|\\.\\.\\.|[&|?:*]/,\n          punctuation: /[.,;=<>{}()[\\]]/\n        }\n      }],\n      example: {\n        pattern: /(@example\\s+(?!\\s))(?:[^@\\s]|\\s+(?!\\s))+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n        lookbehind: true,\n        inside: {\n          code: {\n            pattern: /^([\\t ]*(?:\\*\\s*)?)\\S.*$/m,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          }\n        }\n      }\n    });\n    Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc);\n  })(Prism);\n}","'use strict';\n\nmodule.exports = javadoclike;\njavadoclike.displayName = 'javadoclike';\njavadoclike.aliases = [];\n\nfunction javadoclike(Prism) {\n  ;\n\n  (function (Prism) {\n    var javaDocLike = Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    };\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment';\n      var grammar = Prism.languages[lang];\n\n      if (!grammar) {\n        return;\n      }\n\n      var token = grammar[tokenName];\n\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {};\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        };\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n        token = grammar[tokenName];\n      }\n\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        };\n      }\n\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            };\n          }\n\n          callback(token[i]);\n        }\n      } else {\n        callback(token);\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n\n\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages];\n      }\n\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {};\n          }\n\n          pattern.inside.rest = docLanguage;\n        });\n      });\n    }\n\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    });\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n  })(Prism);\n}","'use strict';\n\nmodule.exports = typescript;\ntypescript.displayName = 'typescript';\ntypescript.aliases = ['ts'];\n\nfunction typescript(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      },\n      builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n    }); // The keywords TypeScript adds to JavaScript\n\n    Prism.languages.typescript.keyword.push(/\\b(?:abstract|as|declare|implements|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n    /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n    /\\btype\\b(?=\\s*(?:[\\{*]|$))/); // doesn't work with TS because TS is too complex\n\n    delete Prism.languages.typescript['parameter']; // a version of typescript specifically for highlighting types\n\n    var typeInside = Prism.languages.extend('typescript', {});\n    delete typeInside['class-name'];\n    Prism.languages.typescript['class-name'].inside = typeInside;\n    Prism.languages.insertBefore('typescript', 'function', {\n      decorator: {\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n        inside: {\n          at: {\n            pattern: /^@/,\n            alias: 'operator'\n          },\n          function: /^[\\s\\S]+/\n        }\n      },\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    });\n    Prism.languages.ts = Prism.languages.typescript;\n  })(Prism);\n}"],"sourceRoot":""}