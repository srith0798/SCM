{"version":3,"sources":["../node_modules/refractor/lang/liquid.js","../node_modules/refractor/lang/markup-templating.js"],"names":["refractorMarkupTemplating","liquid","Prism","register","languages","comment","pattern","lookbehind","delimiter","alias","string","greedy","keyword","object","function","boolean","range","number","operator","punctuation","empty","hooks","add","env","insideRaw","buildPlaceholders","match","tagMatch","exec","tag","tokenizePlaceholders","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","placeholder","i","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_liquid.9edf62c3.chunk.js","sourcesContent":["'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = liquid;\nliquid.displayName = 'liquid';\nliquid.aliases = [];\n\nfunction liquid(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  Prism.languages.liquid = {\n    comment: {\n      pattern: /(^\\{%\\s*comment\\s*%\\})[\\s\\S]+(?=\\{%\\s*endcomment\\s*%\\}$)/,\n      lookbehind: true\n    },\n    delimiter: {\n      pattern: /^\\{(?:\\{\\{|[%\\{])-?|-?(?:\\}\\}|[%\\}])\\}$/,\n      alias: 'punctuation'\n    },\n    string: {\n      pattern: /\"[^\"]*\"|'[^']*'/,\n      greedy: true\n    },\n    keyword: /\\b(?:as|assign|break|continue|cycle|decrement|echo|else|elsif|(?:end)?(?:capture|case|comment|for|form|if|paginate|style|raw|tablerow|unless)|in|include|increment|limit|liquid|offset|range|render|reversed|section|when|with)\\b/,\n    object: /\\b(?:address|all_country_option_tags|article|block|blog|cart|checkout|collection|color|comment|country|country_option_tags|currency|current_page|current_tags|customer|customer_address|date|discount_allocation|discount_application|external_video|filter|filter_value|font|forloop|form|fulfillment|generic_file|gift_card|group|handle|image|line_item|link|linklist|localization|location|measurement|media|metafield|model|model_source|order|page|page_description|page_image|page_title|paginate|part|policy|product|product_option|recommendations|request|robots|routes|rule|script|search|section|selling_plan|selling_plan_allocation|selling_plan_group|shipping_method|shop|shop_locale|sitemap|store_availability|tablerow|tax_line|template|theme|transaction|unit_price_measurement|user_agent|variant|video|video_source)\\b/,\n    function: [{\n      pattern: /(\\|\\s*)\\w+/,\n      lookbehind: true,\n      alias: 'filter'\n    }, {\n      // array functions\n      pattern: /(\\.\\s*)(?:first|last|size)/,\n      lookbehind: true\n    }],\n    boolean: /\\b(?:true|false|nil)\\b/,\n    range: {\n      pattern: /\\.\\./,\n      alias: 'operator'\n    },\n    // https://github.com/Shopify/liquid/blob/698f5e0d967423e013f6169d9111bd969bd78337/lib/liquid/lexer.rb#L21\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    operator: /[!=]=|<>|[<>]=?|[|?:=-]|\\b(?:and|or|contains(?=\\s))\\b/,\n    punctuation: /[.,\\[\\]()]/,\n    empty: {\n      pattern: /\\bempty\\b/,\n      alias: 'keyword'\n    }\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var liquidPattern = /\\{%\\s*comment\\s*%\\}[\\s\\S]*?\\{%\\s*endcomment\\s*%\\}|\\{(?:%[\\s\\S]*?%|\\{\\{[\\s\\S]*?\\}\\}|\\{[\\s\\S]*?\\})\\}/g;\n    var insideRaw = false;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'liquid', liquidPattern, function (match) {\n      var tagMatch = /^\\{%-?\\s*(\\w+)/.exec(match);\n\n      if (tagMatch) {\n        var tag = tagMatch[1];\n\n        if (tag === 'raw' && !insideRaw) {\n          insideRaw = true;\n          return true;\n        } else if (tag === 'endraw') {\n          insideRaw = false;\n          return true;\n        }\n      }\n\n      return !insideRaw;\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'liquid');\n  });\n}","'use strict';\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\n\nfunction markupTemplating(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n\n\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n\n\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n\n              var token = tokens[i];\n\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n\n                  replacement.push(middle);\n\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content);\n              }\n            }\n\n            return tokens;\n          }\n\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}"],"sourceRoot":""}