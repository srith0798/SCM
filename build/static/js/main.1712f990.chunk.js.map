{"version":3,"sources":["modules/baseComponent.js","routes.js","reducers/user.js","reducers/index.js","store.js","serviceWorker.js","index.js","managers/history.js","common/components/loaderAbsoluteCenter.js","common/components/showLoader.js"],"names":["BaseComponent","Component","Dashboard","withRouter","lazy","Routes","getPublicRoutes","exact","from","to","getPrivateRoutes","fallback","path","component","muiTheme","createTheme","history","this","connect","state","user","initialState","isLoggedIn","loginFailure","deviceId","sessionToken","loading","isForgotPasswordSuccess","combineReducers","action","type","loggerMiddleware","createLogger","createStore","rootReducer","applyMiddleware","thunkMiddleware","Boolean","window","location","hostname","match","SCMWebapp","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","createBrowserHistory","LoaderHolder","styled","div","LoaderComponent","props","Top","top","style","CircularProgress","showLoader"],"mappings":"sSAGqBA,E,yIAAsBC,a,iBCQrCC,EAAYC,YAChBC,gBAAK,kBAAM,6DAGPC,E,4MAuBJC,gBAAkB,WAChB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,IAAIC,GAAG,Q,EAIlCC,iBAAmB,WACjB,OACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUJ,OAAK,EAACC,KAAK,IAAIC,GAAG,WAC5B,kBAAC,IAAD,CAAOF,OAAK,EAACK,KAAM,IAAKC,UAAWX,IACnC,kBAAC,IAAD,CAAOK,OAAK,EAACK,KAAM,SAAUC,UAAWX,IACxC,kBAAC,IAAD,CACEK,OAAK,EACLK,KAAM,kBACNC,UAAWX,IAEb,kBAAC,IAAD,CAAUK,OAAK,EAACC,KAAK,IAAIC,GAAG,S,uDAzCpC,c,oBA+CA,WAEE,OACE,oCACA,kBAAC,IAAD,CAAkBK,SAAUC,eAC1B,kBAAC,IAAD,CAAQC,QAASA,KACPC,KAAKP,0B,GAtDFV,GAiENkB,eAHS,SAACC,GACvB,MAAO,CAAEC,KAAMD,EAAMC,QAERF,CAAyBb,G,0BChFpCgB,EAAe,CACfC,YAAY,EACZC,aAAc,KACdC,SAAU,KACVC,aAAc,KACdC,SAAS,EACTC,yBAAyB,GCHdC,kBAAgB,CAC3BR,KDIW,WAA6C,IAA/BD,EAA8B,uDAAtBE,EAAcQ,EAAQ,uCAG/C,OAFAA,EAAOC,KAEAX,KEPbY,EAAmBC,yBAETC,cACZC,EACAC,YACIC,IACAL,I,QCEYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCRN,SAASC,IACL,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUC,MAAOA,GACb,kBAAC,EAAD,CAAQ9B,UAAWR,MAMnCuC,IAASC,OAAO,kBAACH,EAAD,MAAeI,SAASC,eAAe,SD6GjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,gCEnInB,6CAaarC,EAAUsC,e,+ECTjBC,EAAeC,IAAOC,IAAV,oFAgBHC,EAVS,SAACC,GACvB,IAAIC,EAAM,MAGV,OAFGD,EAAME,MACPD,EAAMD,EAAME,KAEV,kBAACN,EAAD,CAAcO,MAAO,CAACD,IAAKD,IAC1B,kBAACG,EAAA,EAAD,QCbQ,SAASC,EAAWL,GAC/B,OACI,6BACKA,EAAMxC,MAAQ,kBAAC,EAAD,CAAQ0C,IAAKF,EAAME,MAAS,IANvD,oC","file":"static/js/main.1712f990.chunk.js","sourcesContent":["//base class\r\nimport { Component } from \"react\";\r\n\r\nexport default class BaseComponent extends Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  // }\r\n}\r\n","import React, { lazy, Suspense } from \"react\";\r\nimport { Router, Route, withRouter } from \"react-router-dom\";\r\nimport { Redirect, Switch } from \"react-router\";\r\nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\";\r\nimport { connect } from \"react-redux\";\r\nimport { history } from \"./managers/history\";\r\nimport BaseComponent from \"./modules/baseComponent\";\r\nimport { createTheme } from \"@material-ui/core/styles\";\r\nimport ShowLoader from \"./common/components/showLoader\";\r\n// import { sessionManager } from \"./managers/sessionManager\";\r\n\r\nconst Dashboard = withRouter(\r\n  lazy(() => import(\"./modules/dashboard/dashboardComponent\"))\r\n);\r\n\r\nclass Routes extends BaseComponent {\r\n  componentDidMount() {\r\n    \r\n    // let user = \"\";\r\n\r\n    // try {\r\n    //   user = window.web3.eth.accounts;\r\n    // } catch (e) {}\r\n\r\n    // const redirectToLogout = () => {\r\n    //   sessionManager.removeDataFromCookies(cookiesConstants.IS_LOGGED_IN);\r\n    //   sessionManager.removeDataFromCookies(cookiesConstants.ACCOUNT_ADDRESS);\r\n    //   sessionManager.removeDataFromCookies(cookiesConstants.USER_ID);\r\n    //   sessionManager.removeDataFromCookies(\"username\");\r\n    //   sessionManager.removeDataFromCookies(\"profilePicture\");\r\n    //   history.replace(\"/\");\r\n    // };\r\n    // if(props.user==\"\")\r\n    //   {redirectToLogout()\r\n    //   }\r\n  \r\n  }\r\n\r\n  getPublicRoutes = () => {\r\n    return (\r\n      <Switch>\r\n        <Redirect exact from=\"*\" to=\"/\" />\r\n      </Switch>\r\n    );\r\n  };\r\n  getPrivateRoutes = () => {\r\n    return (\r\n      <Suspense fallback={<ShowLoader />}>\r\n        <Switch>\r\n          <Redirect exact from=\"/\" to=\"/about\" />\r\n          <Route exact path={\"/\"} component={Dashboard} />\r\n          <Route exact path={\"/:menu\"} component={Dashboard} />\r\n          <Route\r\n            exact\r\n            path={\"/:menu/:subMenu\"}\r\n            component={Dashboard}\r\n          />\r\n          <Redirect exact from=\"*\" to=\"/\" />\r\n        </Switch>\r\n      </Suspense>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <>\r\n      <MuiThemeProvider muiTheme={createTheme()}>\r\n        <Router history={history}>\r\n          {true ? this.getPrivateRoutes() : this.getPublicRoutes()}\r\n        </Router>\r\n      </MuiThemeProvider>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { user: state.user };\r\n};\r\nexport default connect(mapStateToProps)(Routes);\r\n","let initialState = {\r\n    isLoggedIn: false,\r\n    loginFailure: null,\r\n    deviceId: null,\r\n    sessionToken: null,\r\n    loading: false,\r\n    isForgotPasswordSuccess: false\r\n};\r\nexport default function user(state = initialState, action) {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport user from \"./user\";\r\n\r\nexport default combineReducers({\r\n    user\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport rootReducer from \"./reducers/index\";\r\nconst loggerMiddleware = createLogger();\r\n\r\nexport default  createStore(\r\n    rootReducer,\r\n    applyMiddleware(\r\n        thunkMiddleware,\r\n        loggerMiddleware\r\n    )\r\n);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Routes from './routes';\r\nimport store from './store.js';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './assets/styles/custom.css';\r\n\r\n\r\nfunction SCMWebapp() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <Routes component={Routes} />\r\n            </Provider>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nReactDOM.render(<SCMWebapp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","/**\r\n * Created by Ayush Kulshrestha on 18/09/2019.\r\n */\r\n\r\nimport { createBrowserHistory } from 'history';\r\n\r\n/**\r\n * The history library lets you easily manage session history anywhere JavaScript runs.\r\n * history abstracts away the differences in various environments and provides a minimal API\r\n * that lets you manage the history stack, navigate, and persist state between sessions.\r\n */\r\n\r\n\r\nexport const history = createBrowserHistory();\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst LoaderHolder = styled.div`\r\n  position: absolute;\r\n  left: 55%;\r\n  z-index: 10000;\r\n`;\r\n\r\nconst LoaderComponent = (props) => {\r\n  let Top = \"50%\";\r\n  if(props.top)\r\n    Top = props.top;\r\n  return (\r\n      <LoaderHolder style={{top: Top}} >\r\n       <CircularProgress/>\r\n      </LoaderHolder>\r\n  );\r\n};\r\nexport default LoaderComponent;\r\n","import React from 'react'\r\nimport Loader from './loaderAbsoluteCenter'\r\n\r\nexport default function showLoader(props) {\r\n    return (\r\n        <div>\r\n            {props.state ? <Loader top={props.top}/> : \"\" }\r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}