{"version":3,"sources":["../node_modules/refractor/lang/makefile.js"],"names":["makefile","Prism","languages","comment","pattern","lookbehind","string","greedy","alias","target","inside","variable","keyword","function","operator","punctuation","module","exports","displayName","aliases"],"mappings":"yHAMA,SAASA,EAASC,GAChBA,EAAMC,UAAUF,SAAW,CACzBG,QAAS,CACPC,QAAS,6CACTC,YAAY,GAEdC,OAAQ,CACNF,QAAS,iDACTG,QAAQ,GAEV,iBAAkB,CAChBH,QAAS,gCACTI,MAAO,WAETC,OAAQ,CACNL,QAAS,8CACTI,MAAO,SACPE,OAAQ,CACNC,SAAU,wCAGdA,SAAU,wDAEVC,QAAS,6HACTC,SAAU,CACRT,QAAS,wQACTC,YAAY,GAEdS,SAAU,uBACVC,YAAa,YAjCjBC,EAAOC,QAAUjB,EACjBA,EAASkB,YAAc,WACvBlB,EAASmB,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_makefile.9fa981a2.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = makefile;\nmakefile.displayName = 'makefile';\nmakefile.aliases = [];\n\nfunction makefile(Prism) {\n  Prism.languages.makefile = {\n    comment: {\n      pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n      lookbehind: true\n    },\n    string: {\n      pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    'builtin-target': {\n      pattern: /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n      alias: 'builtin'\n    },\n    target: {\n      pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n      alias: 'symbol',\n      inside: {\n        variable: /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n      }\n    },\n    variable: /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n    // Directives\n    keyword: /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,\n    function: {\n      pattern: /(\\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \\t])/,\n      lookbehind: true\n    },\n    operator: /(?:::|[?:+!])?=|[|@]/,\n    punctuation: /[:;(){}]/\n  };\n}"],"sourceRoot":""}