{"version":3,"sources":["../node_modules/refractor/lang/ejs.js","../node_modules/refractor/lang/markup-templating.js"],"names":["refractorMarkupTemplating","ejs","Prism","register","languages","delimiter","pattern","alias","comment","inside","javascript","hooks","add","env","buildPlaceholders","tokenizePlaceholders","eta","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"mappings":"4HAEA,IAAIA,EAA4B,EAAQ,KAMxC,SAASC,EAAIC,GACXA,EAAMC,SAASH,GAEf,SAAWE,GACTA,EAAME,UAAUH,IAAM,CACpBI,UAAW,CACTC,QAAS,qBACTC,MAAO,eAETC,QAAS,YACT,sBAAuB,CACrBF,QAAS,UACTG,OAAQP,EAAME,UAAUM,aAG5BR,EAAMS,MAAMC,IAAI,mBAAmB,SAAUC,GAE3CX,EAAME,UAAU,qBAAqBU,kBAAkBD,EAAK,MAD3C,yBAGnBX,EAAMS,MAAMC,IAAI,kBAAkB,SAAUC,GAC1CX,EAAME,UAAU,qBAAqBW,qBAAqBF,EAAK,UAEjEX,EAAME,UAAUY,IAAMd,EAAME,UAAUH,IAnBxC,CAoBGC,GA3BLe,EAAOC,QAAUjB,EACjBA,EAAIkB,YAAc,MAClBlB,EAAImB,QAAU,CAAC,Q,iCCAf,SAASC,EAAiBnB,IAGxB,SAAWA,GAQT,SAASoB,EAAeC,EAAUC,GAChC,MAAO,MAAQD,EAASE,cAAgBD,EAAQ,MAGlDE,OAAOC,iBAAiBzB,EAAME,UAAU,qBAAuB,GAAI,CACjEU,kBAAmB,CAYjBc,MAAO,SAAef,EAAKU,EAAUM,EAAoBC,GACvD,GAAIjB,EAAIU,WAAaA,EAArB,CAIA,IAAIQ,EAAalB,EAAIkB,WAAa,GAClClB,EAAImB,KAAOnB,EAAImB,KAAKC,QAAQJ,GAAoB,SAAUK,GACxD,GAA6B,oBAAlBJ,IAAiCA,EAAcI,GACxD,OAAOA,EAMT,IAHA,IACIC,EADAC,EAAIL,EAAWM,QAGqD,IAAjExB,EAAImB,KAAKM,QAAQH,EAAcb,EAAeC,EAAUa,OAC3DA,EAKJ,OADAL,EAAWK,GAAKF,EACTC,KAGTtB,EAAI0B,QAAUrC,EAAME,UAAUoC,UAGlCzB,qBAAsB,CAOpBa,MAAO,SAAef,EAAKU,GACzB,GAAIV,EAAIU,WAAaA,GAAaV,EAAIkB,WAAtC,CAKAlB,EAAI0B,QAAUrC,EAAME,UAAUmB,GAC9B,IAAIkB,EAAI,EACJC,EAAOhB,OAAOgB,KAAK7B,EAAIkB,aAE3B,SAASY,EAAWC,GAClB,IAAK,IAAIR,EAAI,EAAGA,EAAIQ,EAAOP,UAErBI,GAAKC,EAAKL,QAFmBD,IAAK,CAMtC,IAAIS,EAAQD,EAAOR,GAEnB,GAAqB,kBAAVS,GAAsBA,EAAMC,SAAoC,kBAAlBD,EAAMC,QAAsB,CACnF,IAAIC,EAAIL,EAAKD,GACTO,EAAInC,EAAIkB,WAAWgB,GACnBE,EAAqB,kBAAVJ,EAAqBA,EAAQA,EAAMC,QAC9CX,EAAcb,EAAeC,EAAUwB,GACvCvB,EAAQyB,EAAEX,QAAQH,GAEtB,GAAIX,GAAS,EAAG,GACZiB,EACF,IAAIS,EAASD,EAAEE,UAAU,EAAG3B,GACxB4B,EAAS,IAAIlD,EAAMmD,MAAM9B,EAAUrB,EAAMoD,SAASN,EAAGnC,EAAI0B,SAAU,YAAchB,EAAUyB,GAC3FO,EAAQN,EAAEE,UAAU3B,EAAQW,EAAYE,QACxCmB,EAAc,GAEdN,GACFM,EAAYC,KAAKC,MAAMF,EAAab,EAAW,CAACO,KAGlDM,EAAYC,KAAKL,GAEbG,GACFC,EAAYC,KAAKC,MAAMF,EAAab,EAAW,CAACY,KAG7B,kBAAVV,EACTD,EAAOe,OAAOD,MAAMd,EAAQ,CAACR,EAAG,GAAGwB,OAAOJ,IAE1CX,EAAMC,QAAUU,QAGXX,EAAMC,SAGfH,EAAWE,EAAMC,SAIrB,OAAOF,EAGTD,CAAW9B,EAAI+B,aArHvB,CAyHG1C,GAhILe,EAAOC,QAAUG,EACjBA,EAAiBF,YAAc,mBAC/BE,EAAiBD,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_ejs.2f690b1b.chunk.js","sourcesContent":["'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = ejs;\nejs.displayName = 'ejs';\nejs.aliases = ['eta'];\n\nfunction ejs(Prism) {\n  Prism.register(refractorMarkupTemplating);\n\n  (function (Prism) {\n    Prism.languages.ejs = {\n      delimiter: {\n        pattern: /^<%[-_=]?|[-_]?%>$/,\n        alias: 'punctuation'\n      },\n      comment: /^#[\\s\\S]*/,\n      'language-javascript': {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.javascript\n      }\n    };\n    Prism.hooks.add('before-tokenize', function (env) {\n      var ejsPattern = /<%(?!%)[\\s\\S]+?%>/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'ejs', ejsPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ejs');\n    });\n    Prism.languages.eta = Prism.languages.ejs;\n  })(Prism);\n}","'use strict';\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\n\nfunction markupTemplating(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n\n\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n\n\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n\n              var token = tokens[i];\n\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n\n                  replacement.push(middle);\n\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content);\n              }\n            }\n\n            return tokens;\n          }\n\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}"],"sourceRoot":""}