{"version":3,"sources":["../node_modules/refractor/lang/dot.js"],"names":["dot","Prism","ID","source","join","IDInside","markup","pattern","lookbehind","alias","inside","languages","withID","flags","RegExp","replace","comment","greedy","keyword","node","operator","punctuation","gv","module","exports","displayName","aliases"],"mappings":"wHAMA,SAASA,EAAIC,IAIX,SAAWA,GACT,IAAIC,EAAK,MAAQ,CACjB,uCAAuCC,OACvC,4BAA4BA,OAC5B,gCAAgCA,OAChC,+EAA+EA,QAAQC,KAAK,KAAO,IAC/FC,EAAW,CACbC,OAAQ,CACNC,QAAS,oBACTC,YAAY,EACZC,MAAO,CAAC,kBAAmB,gBAAiB,gBAC5CC,OAAQT,EAAMU,UAAUL,SAS5B,SAASM,EAAOT,EAAQU,GACtB,OAAOC,OAAOX,EAAOY,QAAQ,SAAS,WACpC,OAAOb,KACLW,GAGNZ,EAAMU,UAAUX,IAAM,CACpBgB,QAAS,CACPT,QAAS,gCACTU,QAAQ,GAEV,aAAc,CACZV,QAASK,EAAO,+CAA+CT,OAAQ,KACvEK,YAAY,EACZS,QAAQ,EACRR,MAAO,aACPC,OAAQL,GAEV,aAAc,CACZE,QAASK,EAAO,oBAAoBT,QACpCK,YAAY,EACZS,QAAQ,EACRP,OAAQL,GAEV,YAAa,CACXE,QAASK,EAAO,qCAAqCT,QACrDK,YAAY,EACZS,QAAQ,EACRP,OAAQL,GAEVa,QAAS,mDACT,gBAAiB,CACfX,QAAS,uDACTC,YAAY,EACZC,MAAO,WAETU,KAAM,CACJZ,QAASK,EAAO,+BAA+BT,QAC/CK,YAAY,EACZS,QAAQ,EACRP,OAAQL,GAEVe,SAAU,aACVC,YAAa,cAEfpB,EAAMU,UAAUW,GAAKrB,EAAMU,UAAUX,IAjEvC,CAkEGC,GA1ELsB,EAAOC,QAAUxB,EACjBA,EAAIyB,YAAc,MAClBzB,EAAI0B,QAAU,CAAC","file":"static/js/react-syntax-highlighter_languages_refractor_dot.0f83a007.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = dot;\ndot.displayName = 'dot';\ndot.aliases = ['gv'];\n\nfunction dot(Prism) {\n  // https://www.graphviz.org/doc/info/lang.html\n  ;\n\n  (function (Prism) {\n    var ID = '(?:' + [// an identifier\n    /[a-zA-Z_\\x80-\\uFFFF][\\w\\x80-\\uFFFF]*/.source, // a number\n    /-?(?:\\.\\d+|\\d+(?:\\.\\d*)?)/.source, // a double-quoted string\n    /\"[^\"\\\\]*(?:\\\\[\\s\\S][^\"\\\\]*)*\"/.source, // HTML-like string\n    /<(?:[^<>]|(?!<!--)<(?:[^<>\"']|\"[^\"]*\"|'[^']*')+>|<!--(?:[^-]|-(?!->))*-->)*>/.source].join('|') + ')';\n    var IDInside = {\n      markup: {\n        pattern: /(^<)[\\s\\S]+(?=>$)/,\n        lookbehind: true,\n        alias: ['language-markup', 'language-html', 'language-xml'],\n        inside: Prism.languages.markup\n      }\n    };\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n\n    function withID(source, flags) {\n      return RegExp(source.replace(/<ID>/g, function () {\n        return ID;\n      }), flags);\n    }\n\n    Prism.languages.dot = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|^#.*/m,\n        greedy: true\n      },\n      'graph-name': {\n        pattern: withID(/(\\b(?:digraph|graph|subgraph)[ \\t\\r\\n]+)<ID>/.source, 'i'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'class-name',\n        inside: IDInside\n      },\n      'attr-value': {\n        pattern: withID(/(=[ \\t\\r\\n]*)<ID>/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      'attr-name': {\n        pattern: withID(/([\\[;, \\t\\r\\n])<ID>(?=[ \\t\\r\\n]*=)/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      keyword: /\\b(?:digraph|edge|graph|node|strict|subgraph)\\b/i,\n      'compass-point': {\n        pattern: /(:[ \\t\\r\\n]*)(?:[ewc_]|[ns][ew]?)(?![\\w\\x80-\\uFFFF])/,\n        lookbehind: true,\n        alias: 'builtin'\n      },\n      node: {\n        pattern: withID(/(^|[^-.\\w\\x80-\\uFFFF\\\\])<ID>/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      operator: /[=:]|-[->]/,\n      punctuation: /[\\[\\]{};,]/\n    };\n    Prism.languages.gv = Prism.languages.dot;\n  })(Prism);\n}"],"sourceRoot":""}