{"version":3,"sources":["../node_modules/refractor/lang/elixir.js"],"names":["elixir","Prism","languages","doc","pattern","inside","attribute","string","comment","greedy","regex","atom","lookbehind","alias","module","argument","function","number","keyword","boolean","operator","punctuation","forEach","o","interpolation","delimiter","rest","exports","displayName","aliases"],"mappings":"wHAMA,SAASA,EAAOC,GACdA,EAAMC,UAAUF,OAAS,CACvBG,IAAK,CACHC,QAAS,6FACTC,OAAQ,CACNC,UAAW,QACXC,OAAQ,gBAGZC,QAAS,CACPJ,QAAS,OACTK,QAAQ,GAGVC,MAAO,CACLN,QAAS,6LACTK,QAAQ,GAEVF,OAAQ,CAAC,CAEPH,QAAS,iNACTK,QAAQ,EACRJ,OAAQ,IAEP,CACDD,QAAS,sBACTK,QAAQ,EACRJ,OAAQ,IAEP,CAEDD,QAAS,gDACTK,QAAQ,EACRJ,OAAQ,KAGVM,KAAM,CAEJP,QAAS,eACTQ,YAAY,EACZC,MAAO,UAETC,OAAQ,CACNV,QAAS,eACTS,MAAO,cAGT,YAAa,iBACbE,SAAU,CAERX,QAAS,eACTQ,YAAY,EACZC,MAAO,YAETP,UAAW,CACTF,QAAS,OACTS,MAAO,YAETG,SAAU,sDACVC,OAAQ,kEACRC,QAAS,kNACTC,QAAS,yBACTC,SAAU,CAAC,2FAA4F,CAErGhB,QAAS,eACTQ,YAAY,GACX,CAEDR,QAAS,eACTQ,YAAY,IAEdS,YAAa,uBAEfpB,EAAMC,UAAUF,OAAOO,OAAOe,SAAQ,SAAUC,GAC9CA,EAAElB,OAAS,CACTmB,cAAe,CACbpB,QAAS,aACTC,OAAQ,CACNoB,UAAW,CACTrB,QAAS,WACTS,MAAO,eAETa,KAAMzB,EAAMC,UAAUF,aAtFhCc,EAAOa,QAAU3B,EACjBA,EAAO4B,YAAc,SACrB5B,EAAO6B,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_elixir.071f9e74.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = elixir;\nelixir.displayName = 'elixir';\nelixir.aliases = [];\n\nfunction elixir(Prism) {\n  Prism.languages.elixir = {\n    doc: {\n      pattern: /@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2)/,\n      inside: {\n        attribute: /^@\\w+/,\n        string: /['\"][\\s\\S]+/\n      }\n    },\n    comment: {\n      pattern: /#.*/m,\n      greedy: true\n    },\n    // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n    regex: {\n      pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n      greedy: true\n    },\n    string: [{\n      // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n      pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n      greedy: true,\n      inside: {// See interpolation below\n      }\n    }, {\n      pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n      greedy: true,\n      inside: {// See interpolation below\n      }\n    }, {\n      // Multi-line strings are allowed\n      pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {// See interpolation below\n      }\n    }],\n    atom: {\n      // Look-behind prevents bad highlighting of the :: operator\n      pattern: /(^|[^:]):\\w+/,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    module: {\n      pattern: /\\b[A-Z]\\w*\\b/,\n      alias: 'class-name'\n    },\n    // Look-ahead prevents bad highlighting of the :: operator\n    'attr-name': /\\b\\w+\\??:(?!:)/,\n    argument: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&\\d+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'variable'\n    },\n    function: /\\b[_a-zA-Z]\\w*[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,\n    number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n    keyword: /\\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,\n    boolean: /\\b(?:true|false|nil)\\b/,\n    operator: [/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/, {\n      // We don't want to match <<\n      pattern: /([^<])<(?!<)/,\n      lookbehind: true\n    }, {\n      // We don't want to match >>\n      pattern: /([^>])>(?!>)/,\n      lookbehind: true\n    }],\n    punctuation: /<<|>>|[.,%\\[\\]{}()]/\n  };\n  Prism.languages.elixir.string.forEach(function (o) {\n    o.inside = {\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.elixir\n        }\n      }\n    };\n  });\n}"],"sourceRoot":""}