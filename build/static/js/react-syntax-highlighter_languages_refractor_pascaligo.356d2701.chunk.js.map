{"version":3,"sources":["../node_modules/refractor/lang/pascaligo.js"],"names":["pascaligo","Prism","braces","source","type","replace","languages","comment","string","pattern","greedy","RegExp","lookbehind","inside","keyword","boolean","builtin","function","number","operator","punctuation","classNameInside","reduce","accum","key","forEach","p","module","exports","displayName","aliases"],"mappings":"yHAMA,SAASA,EAAUC,IAGjB,SAAWA,GAET,IAAIC,EAAS,2CAA2CC,OACpDC,EAAO,kCAAkCD,OAAOE,QAAQ,aAAa,WACvE,OAAOH,KAELF,EAAYC,EAAMK,UAAUN,UAAY,CAC1CO,QAAS,0BACTC,OAAQ,CACNC,QAAS,8CACTC,QAAQ,GAEV,aAAc,CAAC,CACbD,QAASE,OAAO,+BAA+BR,OAAOE,QAAQ,WAAW,WACvE,OAAOD,KACL,KACJQ,YAAY,EACZC,OAAQ,MAEP,CACDJ,QAASE,OAAO,oBAAoBR,OAAOE,QAAQ,WAAW,WAC5D,OAAOD,KACL,KACJS,OAAQ,MAEP,CACDJ,QAASE,OAAO,eAAeR,OAAOE,QAAQ,WAAW,WACvD,OAAOD,MAETQ,YAAY,EACZC,OAAQ,OAGVC,QAAS,CACPL,QAAS,mIACTG,YAAY,GAEdG,QAAS,CACPN,QAAS,8BACTG,YAAY,GAEdI,QAAS,CACPP,QAAS,4DACTG,YAAY,GAEdK,SAAU,kBACVC,OAAQ,CACR,6BACA,4CACAC,SAAU,2EACVC,YAAa,4BAEXC,EAAkB,CAAC,UAAW,UAAW,UAAW,WAAY,eAAeC,QAAO,SAAUC,EAAOC,GAEzG,OADAD,EAAMC,GAAOxB,EAAUwB,GAChBD,IACN,IACHvB,EAAU,cAAcyB,SAAQ,SAAUC,GACxCA,EAAEb,OAASQ,KAzDf,CA2DGpB,GAlEL0B,EAAOC,QAAU5B,EACjBA,EAAU6B,YAAc,YACxB7B,EAAU8B,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_pascaligo.356d2701.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = pascaligo;\npascaligo.displayName = 'pascaligo';\npascaligo.aliases = [];\n\nfunction pascaligo(Prism) {\n  ;\n\n  (function (Prism) {\n    // Pascaligo is a layer 2 smart contract language for the tezos blockchain\n    var braces = /\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\)/.source;\n    var type = /(?:\\b\\w+(?:<braces>)?|<braces>)/.source.replace(/<braces>/g, function () {\n      return braces;\n    });\n    var pascaligo = Prism.languages.pascaligo = {\n      comment: /\\(\\*[\\s\\S]+?\\*\\)|\\/\\/.*/,\n      string: {\n        pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\^[a-z]/i,\n        greedy: true\n      },\n      'class-name': [{\n        pattern: RegExp(/(\\btype\\s+\\w+\\s+is\\s+)<type>/.source.replace(/<type>/g, function () {\n          return type;\n        }), 'i'),\n        lookbehind: true,\n        inside: null // see below\n\n      }, {\n        pattern: RegExp(/<type>(?=\\s+is\\b)/.source.replace(/<type>/g, function () {\n          return type;\n        }), 'i'),\n        inside: null // see below\n\n      }, {\n        pattern: RegExp(/(:\\s*)<type>/.source.replace(/<type>/g, function () {\n          return type;\n        })),\n        lookbehind: true,\n        inside: null // see below\n\n      }],\n      keyword: {\n        pattern: /(^|[^&])\\b(?:begin|block|case|const|else|end|fail|for|from|function|if|is|nil|of|remove|return|skip|then|type|var|while|with)\\b/i,\n        lookbehind: true\n      },\n      boolean: {\n        pattern: /(^|[^&])\\b(?:True|False)\\b/i,\n        lookbehind: true\n      },\n      builtin: {\n        pattern: /(^|[^&])\\b(?:bool|int|list|map|nat|record|string|unit)\\b/i,\n        lookbehind: true\n      },\n      function: /\\b\\w+(?=\\s*\\()/i,\n      number: [// Hexadecimal, octal and binary\n      /%[01]+|&[0-7]+|\\$[a-f\\d]+/i, // Decimal\n      /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?(?:mtz|n)?/i],\n      operator: /->|=\\/=|\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=|]|\\b(?:and|mod|or)\\b/,\n      punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.{}]/\n    };\n    var classNameInside = ['comment', 'keyword', 'builtin', 'operator', 'punctuation'].reduce(function (accum, key) {\n      accum[key] = pascaligo[key];\n      return accum;\n    }, {});\n    pascaligo['class-name'].forEach(function (p) {\n      p.inside = classNameInside;\n    });\n  })(Prism);\n}"],"sourceRoot":""}