{"version":3,"sources":["../node_modules/refractor/lang/markdown.js"],"names":["markdown","Prism","inner","source","createInline","pattern","replace","RegExp","tableCell","tableRow","tableLine","languages","extend","insertBefore","lookbehind","greedy","inside","punctuation","alias","yaml","blockquote","table","code","title","hr","list","variable","string","bold","content","italic","strike","url","operator","forEach","token","hooks","add","env","language","walkTokens","tokens","i","l","length","type","codeLang","codeBlock","lang","exec","toLowerCase","push","classes","cls","match","grammar","highlight","html","text","tagPattern","m","value","parseInt","slice","Number","fromCodePoint","known","KNOWN_ENTITY_NAMES","textContent","plugins","autoloader","id","Date","valueOf","Math","floor","random","attributes","loadLanguages","ele","document","getElementById","innerHTML","markup","tag","amp","lt","gt","quot","String","fromCharCode","md","module","exports","displayName","aliases"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_markdown.6e283031.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = markdown;\nmarkdown.displayName = 'markdown';\nmarkdown.aliases = ['md'];\n\nfunction markdown(Prism) {\n  ;\n\n  (function (Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n\n    function createInline(pattern) {\n      pattern = pattern.replace(/<inner>/g, function () {\n        return inner;\n      });\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n    }\n\n    var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n      return tableCell;\n    });\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n    Prism.languages.markdown = Prism.languages.extend('markup', {});\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      'front-matter-block': {\n        pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^---|---$/,\n          'font-matter': {\n            pattern: /\\S+(?:\\s+\\S+)*/,\n            alias: ['yaml', 'language-yaml'],\n            inside: Prism.languages.yaml\n          }\n        }\n      },\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [{\n        // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n        pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n        lookbehind: true,\n        alias: 'keyword'\n      }, {\n        // ```optional language\n        // code block\n        // ```\n        pattern: /^```[\\s\\S]*?^```$/m,\n        greedy: true,\n        inside: {\n          'code-block': {\n            pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n            lookbehind: true\n          },\n          'code-language': {\n            pattern: /^(```).+/,\n            lookbehind: true\n          },\n          punctuation: /```/\n        }\n      }],\n      title: [{\n        // title 1\n        // =======\n        // title 2\n        // -------\n        pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n        alias: 'important',\n        inside: {\n          punctuation: /==+$|--+$/\n        }\n      }, {\n        // # title 1\n        // ###### title 6\n        pattern: /(^\\s*)#.+/m,\n        lookbehind: true,\n        alias: 'important',\n        inside: {\n          punctuation: /^#+|#+$/\n        }\n      }],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        // eslint-disable-next-line regexp/strict\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /~~?/\n        }\n      },\n      'code-snippet': {\n        // `code`\n        // ``code``\n        pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n        lookbehind: true,\n        greedy: true,\n        alias: ['code', 'keyword']\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          operator: /^!/,\n          content: {\n            pattern: /(^\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          variable: {\n            pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          url: {\n            pattern: /(^\\]\\()[^\\s)]+/,\n            lookbehind: true\n          },\n          string: {\n            pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n            lookbehind: true\n          }\n        }\n      }\n    });\n    ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n      ;\n      ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n        }\n      });\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return;\n      }\n\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return;\n        }\n\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n\n          if (token.type !== 'code') {\n            walkTokens(token.content);\n            continue;\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n\n\n          var codeLang = token.content[1];\n          var codeBlock = token.content[3];\n\n          if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n            // this might be a language that Prism does not support\n            // do some replacements to support C++, C#, and F#\n            var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n            lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n            var alias = 'language-' + lang; // add alias\n\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias];\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias];\n            } else {\n              codeBlock.alias.push(alias);\n            }\n          }\n        }\n      }\n\n      walkTokens(env.tokens);\n    });\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type !== 'code-block') {\n        return;\n      }\n\n      var codeLang = '';\n\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i];\n        var match = /language-(.+)/.exec(cls);\n\n        if (match) {\n          codeLang = match[1];\n          break;\n        }\n      }\n\n      var grammar = Prism.languages[codeLang];\n\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n          env.attributes['id'] = id;\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n            var ele = document.getElementById(id);\n\n            if (ele) {\n              ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n            }\n          });\n        }\n      } else {\n        env.content = Prism.highlight(textContent(env.content.value), grammar, codeLang);\n      }\n    });\n    var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n    /**\n     * A list of known entity names.\n     *\n     * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n     *\n     * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n     */\n\n    var KNOWN_ENTITY_NAMES = {\n      amp: '&',\n      lt: '<',\n      gt: '>',\n      quot: '\"'\n    }; // IE 11 doesn't support `String.fromCodePoint`\n\n    var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n    /**\n     * Returns the text content of a given HTML source code string.\n     *\n     * @param {string} html\n     * @returns {string}\n     */\n\n    function textContent(html) {\n      // remove all tags\n      var text = html.replace(tagPattern, ''); // decode known entities\n\n      text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n        code = code.toLowerCase();\n\n        if (code[0] === '#') {\n          var value;\n\n          if (code[1] === 'x') {\n            value = parseInt(code.slice(2), 16);\n          } else {\n            value = Number(code.slice(1));\n          }\n\n          return fromCodePoint(value);\n        } else {\n          var known = KNOWN_ENTITY_NAMES[code];\n\n          if (known) {\n            return known;\n          } // unable to decode\n\n\n          return m;\n        }\n      });\n      return text;\n    }\n\n    Prism.languages.md = Prism.languages.markdown;\n  })(Prism);\n}"],"sourceRoot":""}