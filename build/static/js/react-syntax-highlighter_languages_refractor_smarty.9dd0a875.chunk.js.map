{"version":3,"sources":["../node_modules/refractor/lang/smarty.js","../node_modules/refractor/lang/markup-templating.js"],"names":["refractorMarkupTemplating","smarty","Prism","register","languages","comment","pattern","greedy","inside","php","alias","string","interpolation","expression","variable","keyword","lookbehind","delimiter","number","function","boolean","punctuation","operator","smartyPattern","RegExp","source","replace","hooks","add","env","smartyLiteralMode","buildPlaceholders","match","tokenizePlaceholders","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","placeholder","i","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_smarty.9dd0a875.chunk.js","sourcesContent":["'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = smarty;\nsmarty.displayName = 'smarty';\nsmarty.aliases = [];\n\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating);\n\n  (function (Prism) {\n    Prism.languages.smarty = {\n      comment: {\n        pattern: /^\\{\\*[\\s\\S]*?\\*\\}/,\n        greedy: true\n      },\n      'embedded-php': {\n        pattern: /^\\{php\\}[\\s\\S]*?\\{\\/php\\}/,\n        greedy: true,\n        inside: {\n          smarty: {\n            pattern: /^\\{php\\}|\\{\\/php\\}$/,\n            inside: null // see below\n\n          },\n          php: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-php',\n            inside: Prism.languages.php\n          }\n        }\n      },\n      string: [{\n        pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /\\{[^{}]*\\}|`[^`]*`/,\n            inside: {\n              'interpolation-punctuation': {\n                pattern: /^[{`]|[`}]$/,\n                alias: 'punctuation'\n              },\n              expression: {\n                pattern: /[\\s\\S]+/,\n                inside: null // see below\n\n              }\n            }\n          },\n          variable: /\\$\\w+/\n        }\n      }, {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n        greedy: true\n      }],\n      keyword: {\n        pattern: /(^\\{\\/?)[a-z_]\\w*\\b(?!\\()/i,\n        lookbehind: true,\n        greedy: true\n      },\n      delimiter: {\n        pattern: /^\\{\\/?|\\}$/,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [/\\$(?!\\d)\\w+/, /#(?!\\d)\\w+#/, {\n        pattern: /(\\.|->|\\w\\s*=)(?!\\d)\\w+\\b(?!\\()/,\n        lookbehind: true\n      }, {\n        pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n        lookbehind: true\n      }],\n      function: {\n        pattern: /(\\|\\s*)@?[a-z_]\\w*|\\b[a-z_]\\w*(?=\\()/i,\n        lookbehind: true\n      },\n      'attr-name': /\\b[a-z_]\\w*(?=\\s*=)/i,\n      boolean: /\\b(?:false|no|off|on|true|yes)\\b/,\n      punctuation: /[\\[\\](){}.,:`]|->/,\n      operator: [/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/, /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/, /\\b(?:and|eq|gt?e|gt|lt?e|lt|mod|neq?|not|or)\\b/]\n    };\n    Prism.languages.smarty['embedded-php'].inside.smarty.inside = Prism.languages.smarty;\n    Prism.languages.smarty.string[0].inside.interpolation.inside.expression.inside = Prism.languages.smarty;\n    var string = /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/;\n    var smartyPattern = RegExp( // comments\n    /\\{\\*[\\s\\S]*?\\*\\}/.source + '|' + // php tags\n    /\\{php\\}[\\s\\S]*?\\{\\/php\\}/.source + '|' + // smarty blocks\n    /\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>)*\\})*\\})*\\}/.source.replace(/<str>/g, function () {\n      return string.source;\n    }), 'g'); // Tokenize all inline Smarty expressions\n\n    Prism.hooks.add('before-tokenize', function (env) {\n      var smartyLiteralStart = '{literal}';\n      var smartyLiteralEnd = '{/literal}';\n      var smartyLiteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {\n        // Smarty tags inside {literal} block are ignored\n        if (match === smartyLiteralEnd) {\n          smartyLiteralMode = false;\n        }\n\n        if (!smartyLiteralMode) {\n          if (match === smartyLiteralStart) {\n            smartyLiteralMode = true;\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');\n    });\n  })(Prism);\n}","'use strict';\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\n\nfunction markupTemplating(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n\n\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n\n\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n\n              var token = tokens[i];\n\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n\n                  replacement.push(middle);\n\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content);\n              }\n            }\n\n            return tokens;\n          }\n\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}"],"sourceRoot":""}