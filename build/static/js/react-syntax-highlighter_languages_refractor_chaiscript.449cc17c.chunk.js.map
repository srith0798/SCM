{"version":3,"sources":["../node_modules/refractor/lang/chaiscript.js","../node_modules/refractor/lang/c.js","../node_modules/refractor/lang/cpp.js"],"names":["refractorCpp","chaiscript","Prism","register","languages","extend","string","pattern","lookbehind","greedy","keyword","number","cpp","operator","insertBefore","alias","inside","interpolation","module","exports","displayName","aliases","c","comment","function","char","macro","directive","punctuation","expression","constant","refractorC","modName","source","replace","RegExp","boolean","generic"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_chaiscript.449cc17c.chunk.js","sourcesContent":["'use strict';\n\nvar refractorCpp = require('./cpp.js');\n\nmodule.exports = chaiscript;\nchaiscript.displayName = 'chaiscript';\nchaiscript.aliases = [];\n\nfunction chaiscript(Prism) {\n  Prism.register(refractorCpp);\n  Prism.languages.chaiscript = Prism.languages.extend('clike', {\n    string: {\n      pattern: /(^|[^\\\\])'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      lookbehind: true,\n      greedy: true\n    },\n    'class-name': [{\n      // e.g. class Rectangle { ... }\n      pattern: /(\\bclass\\s+)\\w+/,\n      lookbehind: true\n    }, {\n      // e.g. attr Rectangle::height, def Rectangle::area() { ... }\n      pattern: /(\\b(?:attr|def)\\s+)\\w+(?=\\s*::)/,\n      lookbehind: true\n    }],\n    keyword: /\\b(?:attr|auto|break|case|catch|class|continue|def|default|else|finally|for|fun|global|if|return|switch|this|try|var|while)\\b/,\n    number: [Prism.languages.cpp.number, /\\b(?:Infinity|NaN)\\b/],\n    operator: />>=?|<<=?|\\|\\||&&|:[:=]?|--|\\+\\+|[=!<>+\\-*/%|&^]=?|[?~]|`[^`\\r\\n]{1,4}`/\n  });\n  Prism.languages.insertBefore('chaiscript', 'operator', {\n    'parameter-type': {\n      // e.g. def foo(int x, Vector y) {...}\n      pattern: /([,(]\\s*)\\w+(?=\\s+\\w)/,\n      lookbehind: true,\n      alias: 'class-name'\n    }\n  });\n  Prism.languages.insertBefore('chaiscript', 'string', {\n    'string-interpolation': {\n      pattern: /(^|[^\\\\])\"(?:[^\"$\\\\]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\}/,\n          lookbehind: true,\n          inside: {\n            'interpolation-expression': {\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n              lookbehind: true,\n              inside: Prism.languages.chaiscript\n            },\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{|\\}$/,\n              alias: 'punctuation'\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  });\n}","'use strict';\n\nmodule.exports = c;\nc.displayName = 'c';\nc.aliases = [];\n\nfunction c(Prism) {\n  Prism.languages.c = Prism.languages.extend('clike', {\n    comment: {\n      pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      greedy: true\n    },\n    string: {\n      // https://en.cppreference.com/w/c/language/string_literal\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n  });\n  Prism.languages.insertBefore('c', 'string', {\n    char: {\n      // https://en.cppreference.com/w/c/language/character_constant\n      pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('c', 'string', {\n    macro: {\n      // allow for multiline macro definitions\n      // spaces after the # character compile fine with gcc\n      pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property',\n      inside: {\n        string: [{\n          // highlight the path of the include statement as a string\n          pattern: /^(#\\s*include\\s*)<[^>]+>/,\n          lookbehind: true\n        }, Prism.languages.c['string']],\n        char: Prism.languages.c['char'],\n        comment: Prism.languages.c['comment'],\n        'macro-name': [{\n          pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n          lookbehind: true\n        }, {\n          pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n          lookbehind: true,\n          alias: 'function'\n        }],\n        // highlight macro directives as keywords\n        directive: {\n          pattern: /^(#\\s*)[a-z]+/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'directive-hash': /^#/,\n        punctuation: /##|\\\\(?=[\\r\\n])/,\n        expression: {\n          pattern: /\\S[\\s\\S]*/,\n          inside: Prism.languages.c\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('c', 'function', {\n    // highlight predefined macros as constants\n    constant: /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n  });\n  delete Prism.languages.c['boolean'];\n}","'use strict';\n\nvar refractorC = require('./c.js');\n\nmodule.exports = cpp;\ncpp.displayName = 'cpp';\ncpp.aliases = [];\n\nfunction cpp(Prism) {\n  Prism.register(refractorC);\n\n  (function (Prism) {\n    var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n    var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function () {\n      return keyword.source;\n    });\n    Prism.languages.cpp = Prism.languages.extend('c', {\n      'class-name': [{\n        pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n          return keyword.source;\n        })),\n        lookbehind: true\n      }, // This is intended to capture the class name of method implementations like:\n      //   void foo::bar() const {}\n      // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n      // it starts with an uppercase letter. This approximation should give decent results.\n      /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n      //   Foo::~Foo() {}\n      /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n      // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n      /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n      keyword: keyword,\n      number: {\n        pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n        greedy: true\n      },\n      operator: />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n      boolean: /\\b(?:false|true)\\b/\n    });\n    Prism.languages.insertBefore('cpp', 'string', {\n      module: {\n        // https://en.cppreference.com/w/cpp/language/modules\n        pattern: RegExp(/(\\b(?:import|module)\\s+)/.source + '(?:' + // header-name\n        /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + '|' + // module name or partition or both\n        /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function () {\n          return modName;\n        }) + ')'),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          string: /^[<\"][\\s\\S]+/,\n          operator: /:/,\n          punctuation: /\\./\n        }\n      },\n      'raw-string': {\n        pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n        alias: 'string',\n        greedy: true\n      }\n    });\n    Prism.languages.insertBefore('cpp', 'keyword', {\n      'generic-function': {\n        pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n        inside: {\n          function: /^\\w+/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            alias: 'class-name',\n            inside: Prism.languages.cpp\n          }\n        }\n      }\n    });\n    Prism.languages.insertBefore('cpp', 'operator', {\n      'double-colon': {\n        pattern: /::/,\n        alias: 'punctuation'\n      }\n    });\n    Prism.languages.insertBefore('cpp', 'class-name', {\n      // the base clause is an optional list of parent classes\n      // https://en.cppreference.com/w/cpp/language/class\n      'base-clause': {\n        pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n        lookbehind: true,\n        greedy: true,\n        inside: Prism.languages.extend('cpp', {})\n      }\n    });\n    Prism.languages.insertBefore('inside', 'double-colon', {\n      // All untokenized words that are not namespaces should be class names\n      'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n    }, Prism.languages.cpp['base-clause']);\n  })(Prism);\n}"],"sourceRoot":""}