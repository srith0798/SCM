{"version":3,"sources":["../node_modules/refractor/lang/abnf.js"],"names":["abnf","Prism","coreRules","languages","comment","string","pattern","greedy","inside","punctuation","range","alias","terminal","repetition","lookbehind","definition","RegExp","rule","operator","module","exports","displayName","aliases"],"mappings":"uHAMA,SAASA,EAAKC,IAGZ,SAAWA,GACT,IAAIC,EAAY,qFAChBD,EAAME,UAAUH,KAAO,CACrBI,QAAS,MACTC,OAAQ,CACNC,QAAS,wBACTC,QAAQ,EACRC,OAAQ,CACNC,YAAa,WAGjBC,MAAO,CACLJ,QAAS,iDACTK,MAAO,UAETC,SAAU,CACRN,QAAS,mEACTK,MAAO,UAETE,WAAY,CACVP,QAAS,6BACTQ,YAAY,EACZH,MAAO,YAETI,WAAY,CACVT,QAAS,iDACTQ,YAAY,EACZH,MAAO,UACPH,OAAQ,CACNC,YAAa,QAGjB,YAAa,CACXH,QAASU,OAAO,kBAAoBd,EAAY,KAAOA,EAAY,eAAgB,KACnFY,YAAY,EACZH,MAAO,CAAC,OAAQ,YAChBH,OAAQ,CACNC,YAAa,QAGjBQ,KAAM,CACJX,QAAS,uCACTQ,YAAY,EACZN,OAAQ,CACNC,YAAa,QAGjBS,SAAU,UACVT,YAAa,YAhDjB,CAkDGR,GAzDLkB,EAAOC,QAAUpB,EACjBA,EAAKqB,YAAc,OACnBrB,EAAKsB,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_abnf.ccbf9196.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = abnf;\nabnf.displayName = 'abnf';\nabnf.aliases = [];\n\nfunction abnf(Prism) {\n  ;\n\n  (function (Prism) {\n    var coreRules = '(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)';\n    Prism.languages.abnf = {\n      comment: /;.*/,\n      string: {\n        pattern: /(?:%[is])?\"[^\"\\n\\r]*\"/,\n        greedy: true,\n        inside: {\n          punctuation: /^%[is]/\n        }\n      },\n      range: {\n        pattern: /%(?:b[01]+-[01]+|d\\d+-\\d+|x[A-F\\d]+-[A-F\\d]+)/i,\n        alias: 'number'\n      },\n      terminal: {\n        pattern: /%(?:b[01]+(?:\\.[01]+)*|d\\d+(?:\\.\\d+)*|x[A-F\\d]+(?:\\.[A-F\\d]+)*)/i,\n        alias: 'number'\n      },\n      repetition: {\n        pattern: /(^|[^\\w-])(?:\\d*\\*\\d*|\\d+)/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      definition: {\n        pattern: /(^[ \\t]*)(?:[a-z][\\w-]*|<[^<>\\r\\n]*>)(?=\\s*=)/m,\n        lookbehind: true,\n        alias: 'keyword',\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      'core-rule': {\n        pattern: RegExp('(?:(^|[^<\\\\w-])' + coreRules + '|<' + coreRules + '>)(?![\\\\w-])', 'i'),\n        lookbehind: true,\n        alias: ['rule', 'constant'],\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      rule: {\n        pattern: /(^|[^<\\w-])[a-z][\\w-]*|<[^<>\\r\\n]*>/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      operator: /=\\/?|\\//,\n      punctuation: /[()\\[\\]]/\n    };\n  })(Prism);\n}"],"sourceRoot":""}