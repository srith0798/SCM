{"version":3,"sources":["../node_modules/refractor/lang/erb.js","../node_modules/refractor/lang/markup-templating.js","../node_modules/refractor/lang/ruby.js"],"names":["refractorRuby","refractorMarkupTemplating","erb","Prism","register","languages","delimiter","pattern","lookbehind","alias","ruby","inside","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat","extend","comment","greedy","punctuation","keyword","operator","insertBefore","interpolation","function","percentExpression","source","join","symbolName","RegExp","regex","variable","symbol","string","command","builtin","constant","rb"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_erb.63b4e080.chunk.js","sourcesContent":["'use strict';\n\nvar refractorRuby = require('./ruby.js');\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = erb;\nerb.displayName = 'erb';\nerb.aliases = [];\n\nfunction erb(Prism) {\n  Prism.register(refractorRuby);\n  Prism.register(refractorMarkupTemplating);\n\n  (function (Prism) {\n    Prism.languages.erb = {\n      delimiter: {\n        pattern: /^(\\s*)<%=?|%>(?=\\s*$)/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      ruby: {\n        pattern: /\\s*\\S[\\s\\S]*/,\n        alias: 'language-ruby',\n        inside: Prism.languages.ruby\n      }\n    };\n    Prism.hooks.add('before-tokenize', function (env) {\n      var erbPattern = /<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s(?:[^\\r\\n]|[\\r\\n](?!=end))*[\\r\\n]=end)+?%>/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'erb', erbPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'erb');\n    });\n  })(Prism);\n}","'use strict';\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\n\nfunction markupTemplating(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n\n\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n\n\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n\n              var token = tokens[i];\n\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n\n                  replacement.push(middle);\n\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content);\n              }\n            }\n\n            return tokens;\n          }\n\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}","'use strict';\n\nmodule.exports = ruby;\nruby.displayName = 'ruby';\nruby.aliases = ['rb'];\n\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *     constant, builtin, variable, symbol, regex\n   */\n  ;\n\n  (function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: {\n        pattern: /#.*|^=begin\\s[\\s\\S]*?^=end/m,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\b(?:class|module)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+|\\b[A-Z_]\\w*(?=\\s*\\.\\s*new\\b)/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.\\\\]/\n        }\n      },\n      keyword: /\\b(?:BEGIN|END|alias|and|begin|break|case|class|def|define_method|defined|do|each|else|elsif|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|private|protected|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/,\n      operator: /\\.{2,3}|&\\.|===|<?=>|[!=]?~|(?:&&|\\|\\||<<|>>|\\*\\*|[+\\-*/%<>!^&|=])=?|[?:]/,\n      punctuation: /[(){}[\\].,;]/\n    });\n    Prism.languages.insertBefore('ruby', 'operator', {\n      'double-colon': {\n        pattern: /::/,\n        alias: 'punctuation'\n      }\n    });\n    var interpolation = {\n      pattern: /((?:^|[^\\\\])(?:\\\\{2})*)#\\{(?:[^{}]|\\{[^{}]*\\})*\\}/,\n      lookbehind: true,\n      inside: {\n        content: {\n          pattern: /^(#\\{)[\\s\\S]+(?=\\}$)/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        },\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'punctuation'\n        }\n      }\n    };\n    delete Prism.languages.ruby.function;\n    var percentExpression = '(?:' + [/([^a-zA-Z0-9\\s{(\\[<=])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, /\\((?:[^()\\\\]|\\\\[\\s\\S]|\\((?:[^()\\\\]|\\\\[\\s\\S])*\\))*\\)/.source, /\\{(?:[^{}\\\\]|\\\\[\\s\\S]|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\})*\\}/.source, /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S]|\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\])*\\]/.source, /<(?:[^<>\\\\]|\\\\[\\s\\S]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)*>/.source].join('|') + ')';\n    var symbolName = /(?:\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|(?:\\b[a-zA-Z_]\\w*|[^\\s\\0-\\x7F]+)[?!]?|\\$.)/.source;\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      'regex-literal': [{\n        pattern: RegExp(/%r/.source + percentExpression + /[egimnosux]{0,6}/.source),\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          regex: /[\\s\\S]+/\n        }\n      }, {\n        pattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[egimnosux]{0,6}(?=\\s*(?:$|[\\r\\n,.;})#]))/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          regex: /[\\s\\S]+/\n        }\n      }],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: [{\n        pattern: RegExp(/(^|[^:]):/.source + symbolName),\n        lookbehind: true,\n        greedy: true\n      }, {\n        pattern: RegExp(/([\\r\\n{(,][ \\t]*)/.source + symbolName + /(?=:(?!:))/.source),\n        lookbehind: true,\n        greedy: true\n      }],\n      'method-definition': {\n        pattern: /(\\bdef\\s+)\\w+(?:\\s*\\.\\s*\\w+)?/,\n        lookbehind: true,\n        inside: {\n          function: /\\b\\w+$/,\n          keyword: /^self\\b/,\n          'class-name': /^\\w+/,\n          punctuation: /\\./\n        }\n      }\n    });\n    Prism.languages.insertBefore('ruby', 'string', {\n      'string-literal': [{\n        pattern: RegExp(/%[qQiIwWs]?/.source + percentExpression),\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          string: /[\\s\\S]+/\n        }\n      }, {\n        pattern: /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          string: /[\\s\\S]+/\n        }\n      }, {\n        pattern: /<<[-~]?([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n        alias: 'heredoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<[-~]?[a-z_]\\w*|\\b[a-z_]\\w*$/i,\n            inside: {\n              symbol: /\\b\\w+/,\n              punctuation: /^<<[-~]?/\n            }\n          },\n          interpolation: interpolation,\n          string: /[\\s\\S]+/\n        }\n      }, {\n        pattern: /<<[-~]?'([a-z_]\\w*)'[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n        alias: 'heredoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<[-~]?'[a-z_]\\w*'|\\b[a-z_]\\w*$/i,\n            inside: {\n              symbol: /\\b\\w+/,\n              punctuation: /^<<[-~]?'|'$/\n            }\n          },\n          string: /[\\s\\S]+/\n        }\n      }],\n      'command-literal': [{\n        pattern: RegExp(/%x/.source + percentExpression),\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          command: {\n            pattern: /[\\s\\S]+/,\n            alias: 'string'\n          }\n        }\n      }, {\n        pattern: /`(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|[^\\\\`#\\r\\n])*`/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          command: {\n            pattern: /[\\s\\S]+/,\n            alias: 'string'\n          }\n        }\n      }]\n    });\n    delete Prism.languages.ruby.string;\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Fixnum|Float|Hash|IO|Integer|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|Stat|String|Struct|Symbol|TMS|Thread|ThreadGroup|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z][A-Z0-9_]*(?:[?!]|\\b)/\n    });\n    Prism.languages.rb = Prism.languages.ruby;\n  })(Prism);\n}"],"sourceRoot":""}