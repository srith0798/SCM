{"version":3,"sources":["../node_modules/refractor/lang/markup.js"],"names":["markup","Prism","languages","comment","pattern","greedy","prolog","doctype","inside","lookbehind","string","punctuation","name","cdata","tag","namespace","alias","entity","hooks","add","env","type","attributes","content","value","replace","Object","defineProperty","tagName","lang","includedCdataInside","def","RegExp","source","insertBefore","attrName","push","html","mathml","svg","xml","extend","ssml","atom","rss","module","exports","displayName","aliases"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_markup.71c26c9c.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = markup;\nmarkup.displayName = 'markup';\nmarkup.aliases = ['html', 'mathml', 'svg', 'xml', 'ssml', 'atom', 'rss'];\n\nfunction markup(Prism) {\n  Prism.languages.markup = {\n    comment: {\n      pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n      greedy: true\n    },\n    prolog: {\n      pattern: /<\\?[\\s\\S]+?\\?>/,\n      greedy: true\n    },\n    doctype: {\n      // https://www.w3.org/TR/xml/#NT-doctypedecl\n      pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n      greedy: true,\n      inside: {\n        'internal-subset': {\n          pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n          lookbehind: true,\n          greedy: true,\n          inside: null // see below\n\n        },\n        string: {\n          pattern: /\"[^\"]*\"|'[^']*'/,\n          greedy: true\n        },\n        punctuation: /^<!|>$|[[\\]]/,\n        'doctype-tag': /^DOCTYPE/i,\n        name: /[^\\s<>'\"]+/\n      }\n    },\n    cdata: {\n      pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n      greedy: true\n    },\n    tag: {\n      pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n      greedy: true,\n      inside: {\n        tag: {\n          pattern: /^<\\/?[^\\s>\\/]+/,\n          inside: {\n            punctuation: /^<\\/?/,\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        },\n        'special-attr': [],\n        'attr-value': {\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n          inside: {\n            punctuation: [{\n              pattern: /^=/,\n              alias: 'attr-equals'\n            }, /\"|'/]\n          }\n        },\n        punctuation: /\\/?>/,\n        'attr-name': {\n          pattern: /[^\\s>\\/]+/,\n          inside: {\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        }\n      }\n    },\n    entity: [{\n      pattern: /&[\\da-z]{1,8};/i,\n      alias: 'named-entity'\n    }, /&#x?[\\da-f]{1,8};/i]\n  };\n  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];\n  Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type === 'entity') {\n      env.attributes['title'] = env.content.value.replace(/&amp;/, '&');\n    }\n  });\n  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n    /**\n     * Adds an inlined language to markup.\n     *\n     * An example of an inlined language is CSS with `<style>` tags.\n     *\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addInlined('style', 'css');\n     */\n    value: function addInlined(tagName, lang) {\n      var includedCdataInside = {};\n      includedCdataInside['language-' + lang] = {\n        pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n        lookbehind: true,\n        inside: Prism.languages[lang]\n      };\n      includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n      var inside = {\n        'included-cdata': {\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n          inside: includedCdataInside\n        }\n      };\n      inside['language-' + lang] = {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages[lang]\n      };\n      var def = {};\n      def[tagName] = {\n        pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n          return tagName;\n        }), 'i'),\n        lookbehind: true,\n        greedy: true,\n        inside: inside\n      };\n      Prism.languages.insertBefore('markup', 'cdata', def);\n    }\n  });\n  Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n    /**\n     * Adds an pattern to highlight languages embedded in HTML attributes.\n     *\n     * An example of an inlined language is CSS with `style` attributes.\n     *\n     * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addAttribute('style', 'css');\n     */\n    value: function value(attrName, lang) {\n      Prism.languages.markup.tag.inside['special-attr'].push({\n        pattern: RegExp(/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, 'i'),\n        lookbehind: true,\n        inside: {\n          'attr-name': /^[^\\s=]+/,\n          'attr-value': {\n            pattern: /=[\\s\\S]+/,\n            inside: {\n              value: {\n                pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                lookbehind: true,\n                alias: [lang, 'language-' + lang],\n                inside: Prism.languages[lang]\n              },\n              punctuation: [{\n                pattern: /^=/,\n                alias: 'attr-equals'\n              }, /\"|'/]\n            }\n          }\n        }\n      });\n    }\n  });\n  Prism.languages.html = Prism.languages.markup;\n  Prism.languages.mathml = Prism.languages.markup;\n  Prism.languages.svg = Prism.languages.markup;\n  Prism.languages.xml = Prism.languages.extend('markup', {});\n  Prism.languages.ssml = Prism.languages.xml;\n  Prism.languages.atom = Prism.languages.xml;\n  Prism.languages.rss = Prism.languages.xml;\n}"],"sourceRoot":""}