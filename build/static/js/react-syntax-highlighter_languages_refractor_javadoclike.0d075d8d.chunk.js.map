{"version":3,"sources":["../node_modules/refractor/lang/javadoclike.js"],"names":["javadoclike","Prism","javaDocLike","languages","parameter","pattern","lookbehind","keyword","punctuation","Object","defineProperty","value","docLanguage","forEach","lang","callback","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","docCommentSupport","inside","rest","addSupport","module","exports","displayName","aliases"],"mappings":"uHAMA,SAASA,EAAYC,IAGnB,SAAWA,GACT,IAAIC,EAAcD,EAAME,UAAUH,YAAc,CAC9CI,UAAW,CACTC,QAAS,iEACTC,YAAY,GAEdC,QAAS,CAGPF,QAAS,wDACTC,YAAY,GAEdE,YAAa,QA4EfC,OAAOC,eAAeR,EAAa,aAAc,CAC/CS,MAjBF,SAAoBR,EAAWS,GACJ,kBAAdT,IACTA,EAAY,CAACA,IAGfA,EAAUU,SAAQ,SAAUC,IAxD9B,SAA2BA,EAAMC,GAC/B,IACIC,EAAUf,EAAME,UAAUW,GAE9B,GAAKE,EAAL,CAIA,IAAIC,EAAQD,EAPI,eAShB,IAAKC,EAAO,CAEV,IAAIC,EAAa,CACjB,cAAwB,CACtBb,QAAS,wCACTC,YAAY,EACZa,MAAO,YAGTF,GADAD,EAAUf,EAAME,UAAUiB,aAAaN,EAAM,UAAWI,IAjB1C,eA4BhB,GAPID,aAAiBI,SAEnBJ,EAAQD,EAvBM,eAuBe,CAC3BX,QAASY,IAITK,MAAMC,QAAQN,GAChB,IAAK,IAAIO,EAAI,EAAGC,EAAIR,EAAMS,OAAQF,EAAIC,EAAGD,IACnCP,EAAMO,aAAcH,SACtBJ,EAAMO,GAAK,CACTnB,QAASY,EAAMO,KAInBT,EAASE,EAAMO,SAGjBT,EAASE,IAiBTU,CAAkBb,GAAM,SAAUT,GAC3BA,EAAQuB,SACXvB,EAAQuB,OAAS,IAGnBvB,EAAQuB,OAAOC,KAAOjB,WAQ5BV,EAAY4B,WAAW,CAAC,OAAQ,aAAc,OAAQ5B,GA3FxD,CA4FGD,GAnGL8B,EAAOC,QAAUhC,EACjBA,EAAYiC,YAAc,cAC1BjC,EAAYkC,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_javadoclike.0d075d8d.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = javadoclike;\njavadoclike.displayName = 'javadoclike';\njavadoclike.aliases = [];\n\nfunction javadoclike(Prism) {\n  ;\n\n  (function (Prism) {\n    var javaDocLike = Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    };\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment';\n      var grammar = Prism.languages[lang];\n\n      if (!grammar) {\n        return;\n      }\n\n      var token = grammar[tokenName];\n\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {};\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        };\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n        token = grammar[tokenName];\n      }\n\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        };\n      }\n\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            };\n          }\n\n          callback(token[i]);\n        }\n      } else {\n        callback(token);\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n\n\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages];\n      }\n\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {};\n          }\n\n          pattern.inside.rest = docLanguage;\n        });\n      });\n    }\n\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    });\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n  })(Prism);\n}"],"sourceRoot":""}