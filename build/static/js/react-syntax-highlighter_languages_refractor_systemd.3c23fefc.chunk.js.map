{"version":3,"sources":["../node_modules/refractor/lang/systemd.js"],"names":["systemd","Prism","comment","pattern","greedy","quotesSource","source","languages","section","inside","punctuation","alias","key","value","RegExp","lookbehind","quoted","boolean","module","exports","displayName","aliases"],"mappings":"yHAMA,SAASA,EAAQC,IAIf,SAAWA,GACT,IAAIC,EAAU,CACZC,QAAS,WACTC,QAAQ,GAENC,EAAe,4CAA4CC,OAC/DL,EAAMM,UAAUP,QAAU,CACxBE,QAASA,EACTM,QAAS,CACPL,QAAS,gCACTC,QAAQ,EACRK,OAAQ,CACNC,YAAa,UACb,eAAgB,CACdP,QAAS,UACTQ,MAAO,cAIbC,IAAK,CACHT,QAAS,uBACTC,QAAQ,EACRO,MAAO,aAETE,MAAO,CAMLV,QAASW,OAAO,kBAAkBR,OAClC,MAAQD,EADQ,oBAEP,UAAUC,OAAV,wBACsBD,EADtB,KAEH,sCAAsCC,OAAU,MACtDS,YAAY,EACZX,QAAQ,EACRO,MAAO,aACPF,OAAQ,CACNP,QAASA,EACTc,OAAQ,CACNb,QAASW,OAAO,SAASR,OAASD,GAClCU,YAAY,EACZX,QAAQ,GAEVM,YAAa,OACbO,QAAS,CACPd,QAAS,iCACTC,QAAQ,KAIdM,YAAa,KApDjB,CAsDGT,GA9DLiB,EAAOC,QAAUnB,EACjBA,EAAQoB,YAAc,UACtBpB,EAAQqB,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_systemd.3c23fefc.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = systemd;\nsystemd.displayName = 'systemd';\nsystemd.aliases = [];\n\nfunction systemd(Prism) {\n  // https://www.freedesktop.org/software/systemd/man/systemd.syntax.html\n  ;\n\n  (function (Prism) {\n    var comment = {\n      pattern: /^[;#].*/m,\n      greedy: true\n    };\n    var quotesSource = /\"(?:[^\\r\\n\"\\\\]|\\\\(?:[^\\r]|\\r\\n?))*\"(?!\\S)/.source;\n    Prism.languages.systemd = {\n      comment: comment,\n      section: {\n        pattern: /^\\[[^\\n\\r\\[\\]]*\\](?=[ \\t]*$)/m,\n        greedy: true,\n        inside: {\n          punctuation: /^\\[|\\]$/,\n          'section-name': {\n            pattern: /[\\s\\S]+/,\n            alias: 'selector'\n          }\n        }\n      },\n      key: {\n        pattern: /^[^\\s=]+(?=[ \\t]*=)/m,\n        greedy: true,\n        alias: 'attr-name'\n      },\n      value: {\n        // This pattern is quite complex because of two properties:\n        //  1) Quotes (strings) must be preceded by a space. Since we can't use lookbehinds, we have to \"resolve\"\n        //     the lookbehind. You will see this in the main loop where spaces are handled separately.\n        //  2) Line continuations.\n        //     After line continuations, empty lines and comments are ignored so we have to consume them.\n        pattern: RegExp(/(=[ \\t]*(?!\\s))/.source + // the value either starts with quotes or not\n        '(?:' + quotesSource + '|(?=[^\"\\r\\n]))' + // main loop\n        '(?:' + (/[^\\s\\\\]/.source + // handle spaces separately because of quotes\n        '|' + '[ \\t]+(?:(?![ \\t\"])|' + quotesSource + ')' + // line continuation\n        '|' + /\\\\[\\r\\n]+(?:[#;].*[\\r\\n]+)*(?![#;])/.source) + ')*'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'attr-value',\n        inside: {\n          comment: comment,\n          quoted: {\n            pattern: RegExp(/(^|\\s)/.source + quotesSource),\n            lookbehind: true,\n            greedy: true\n          },\n          punctuation: /\\\\$/m,\n          boolean: {\n            pattern: /^(?:false|no|off|on|true|yes)$/,\n            greedy: true\n          }\n        }\n      },\n      punctuation: /=/\n    };\n  })(Prism);\n}"],"sourceRoot":""}