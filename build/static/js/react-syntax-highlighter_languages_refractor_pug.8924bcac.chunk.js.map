{"version":3,"sources":["../node_modules/refractor/lang/pug.js"],"names":["pug","Prism","languages","comment","pattern","lookbehind","inside","javascript","filter","alias","markup","doctype","each","keyword","punctuation","branch","rest","mixin","function","name","script","tag","attributes","code","filter_pattern","source","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore","module","exports","displayName","aliases"],"mappings":"yHAMA,SAASA,EAAIC,IAGX,SAAWA,GAQTA,EAAMC,UAAUF,IAAM,CAGpBG,QAAS,CACPC,QAAS,+CACTC,YAAY,GAId,mBAAoB,CAClBD,QAAS,sFACTC,YAAY,EACZC,OAAQL,EAAMC,UAAUK,YAG1BC,OAAQ,CACNJ,QAAS,uEACTC,YAAY,EACZC,OAAQ,CACN,cAAe,CACbF,QAAS,WACTK,MAAO,cAIb,uBAAwB,CACtBL,QAAS,qFACTC,YAAY,GAEdK,OAAQ,CACNN,QAAS,gBACTC,YAAY,EACZC,OAAQL,EAAMC,UAAUQ,QAE1BC,QAAS,CACPP,QAAS,kCACTC,YAAY,GAGd,eAAgB,CACdD,QAAS,sEACTC,YAAY,EACZC,OAAQ,CACNM,KAAM,CACJR,QAAS,iBACTE,OAAQ,CACNO,QAAS,kBACTC,YAAa,MAGjBC,OAAQ,CACNX,QAAS,gDACTK,MAAO,WAETO,KAAMf,EAAMC,UAAUK,aAG1BM,QAAS,CACPT,QAAS,yDACTC,YAAY,GAEdY,MAAO,CACP,CACEb,QAAS,qBACTC,YAAY,EACZC,OAAQ,CACNO,QAAS,SACTK,SAAU,oBACVJ,YAAa,WAGjB,CACEV,QAAS,iBACTC,YAAY,EACZC,OAAQ,CACNa,KAAM,CACJf,QAAS,SACTK,MAAO,YAETO,KAAMf,EAAMC,UAAUK,cAG1Ba,OAAQ,CACNhB,QAAS,mDACTC,YAAY,EACZC,OAAQL,EAAMC,UAAUK,YAE1B,aAAc,CACZH,QAAS,oEACTC,YAAY,GAEdgB,IAAK,CACHjB,QAAS,+DACTC,YAAY,EACZC,OAAQ,CACNgB,WAAY,CAAC,CACXlB,QAAS,kBACTE,OAAQL,EAAMC,UAAUK,YACvB,CACDH,QAAS,YACTE,OAAQ,CACN,aAAc,CACZF,QAAS,uCACTC,YAAY,EACZC,OAAQL,EAAMC,UAAUK,YAE1B,YAAa,2BACbO,YAAa,cAGjBA,YAAa,IACb,UAAW,WACX,aAAc,cAGlBS,KAAM,CAAC,CACLnB,QAAS,wBACTC,YAAY,EACZC,OAAQL,EAAMC,UAAUK,aAE1BO,YAAa,aAgBf,IAdA,IAAIU,EAAiB,iFAAiFC,OAElGC,EAAU,CAAC,CACblB,OAAQ,OACRmB,SAAU,QACT,CACDnB,OAAQ,SACRmB,SAAU,gBACT,MAAO,aAAc,OAAQ,aAAc,WAAY,CACxDnB,OAAQ,OACRmB,SAAU,QACT,UACCC,EAAc,GAETC,EAAI,EAAGC,EAAIJ,EAAQK,OAAQF,EAAIC,EAAGD,IAAK,CAC9C,IAAIrB,EAASkB,EAAQG,GACrBrB,EAA2B,kBAAXA,EAAsB,CACpCA,OAAQA,EACRmB,SAAUnB,GACRA,EAEAP,EAAMC,UAAUM,EAAOmB,YACzBC,EAAY,UAAYpB,EAAOA,QAAU,CACvCJ,QAAS4B,OAAOR,EAAeS,QAAQ,iBAAiB,WACtD,OAAOzB,EAAOA,UACZ,KACJH,YAAY,EACZC,OAAQ,CACN,cAAe,CACbF,QAAS,WACTK,MAAO,YAETO,KAAMf,EAAMC,UAAUM,EAAOmB,aAMrC1B,EAAMC,UAAUgC,aAAa,MAAO,SAAUN,GAxKhD,CAyKG3B,GAhLLkC,EAAOC,QAAUpC,EACjBA,EAAIqC,YAAc,MAClBrC,EAAIsC,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_pug.8924bcac.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = pug;\npug.displayName = 'pug';\npug.aliases = [];\n\nfunction pug(Prism) {\n  ;\n\n  (function (Prism) {\n    // TODO:\n    // - Add CSS highlighting inside <style> tags\n    // - Add support for multi-line code blocks\n    // - Add support for interpolation #{} and !{}\n    // - Add support for tag interpolation #[]\n    // - Add explicit support for plain text using |\n    // - Add support for markup embedded in plain text\n    Prism.languages.pug = {\n      // Multiline stuff should appear before the rest\n      // This handles both single-line and multi-line comments\n      comment: {\n        pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/m,\n        lookbehind: true\n      },\n      // All the tag-related part is in lookbehind\n      // so that it can be highlighted by the \"tag\" pattern\n      'multiline-script': {\n        pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      'multiline-plain-text': {\n        pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true\n      },\n      markup: {\n        pattern: /(^[\\t ]*)<.+/m,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      },\n      doctype: {\n        pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n        lookbehind: true\n      },\n      // This handle all conditional and loop keywords\n      'flow-control': {\n        pattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,\n        lookbehind: true,\n        inside: {\n          each: {\n            pattern: /^each .+? in\\b/,\n            inside: {\n              keyword: /\\b(?:each|in)\\b/,\n              punctuation: /,/\n            }\n          },\n          branch: {\n            pattern: /^(?:if|unless|else|case|when|default|while)\\b/,\n            alias: 'keyword'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      keyword: {\n        pattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,\n        lookbehind: true\n      },\n      mixin: [// Declaration\n      {\n        pattern: /(^[\\t ]*)mixin .+/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^mixin/,\n          function: /\\w+(?=\\s*\\(|\\s*$)/,\n          punctuation: /[(),.]/\n        }\n      }, // Usage\n      {\n        pattern: /(^[\\t ]*)\\+.+/m,\n        lookbehind: true,\n        inside: {\n          name: {\n            pattern: /^\\+\\w+/,\n            alias: 'function'\n          },\n          rest: Prism.languages.javascript\n        }\n      }],\n      script: {\n        pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]).+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      'plain-text': {\n        pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]).+/m,\n        lookbehind: true\n      },\n      tag: {\n        pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n        lookbehind: true,\n        inside: {\n          attributes: [{\n            pattern: /&[^(]+\\([^)]+\\)/,\n            inside: Prism.languages.javascript\n          }, {\n            pattern: /\\([^)]+\\)/,\n            inside: {\n              'attr-value': {\n                pattern: /(=\\s*(?!\\s))(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n                lookbehind: true,\n                inside: Prism.languages.javascript\n              },\n              'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n              punctuation: /[!=(),]+/\n            }\n          }],\n          punctuation: /:/,\n          'attr-id': /#[\\w\\-]+/,\n          'attr-class': /\\.[\\w\\-]+/\n        }\n      },\n      code: [{\n        pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      }],\n      punctuation: /[.\\-!=|]+/\n    };\n    var filter_pattern = /(^([\\t ]*)):<filter_name>(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/.source; // Non exhaustive list of available filters and associated languages\n\n    var filters = [{\n      filter: 'atpl',\n      language: 'twig'\n    }, {\n      filter: 'coffee',\n      language: 'coffeescript'\n    }, 'ejs', 'handlebars', 'less', 'livescript', 'markdown', {\n      filter: 'sass',\n      language: 'scss'\n    }, 'stylus'];\n    var all_filters = {};\n\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i];\n      filter = typeof filter === 'string' ? {\n        filter: filter,\n        language: filter\n      } : filter;\n\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(filter_pattern.replace('<filter_name>', function () {\n            return filter.filter;\n          }), 'm'),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        };\n      }\n    }\n\n    Prism.languages.insertBefore('pug', 'filter', all_filters);\n  })(Prism);\n}"],"sourceRoot":""}