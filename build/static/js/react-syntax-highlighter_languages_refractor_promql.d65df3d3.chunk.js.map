{"version":3,"sources":["../node_modules/refractor/lang/promql.js"],"names":["promql","Prism","vectorMatching","keywords","concat","languages","comment","pattern","lookbehind","RegExp","join","inside","alias","punctuation","greedy","keyword","function","number","operator","module","exports","displayName","aliases"],"mappings":"yHAMA,SAASA,EAAOC,IAKd,SAAWA,GAGT,IAGIC,EAAiB,CAAC,KAAM,WAAY,cAAe,aAAc,KAAM,WAIvEC,EAPe,CAAC,MAAO,MAAO,MAAO,MAAO,QAAS,SAAU,SAAU,QAAS,eAAgB,UAAW,OAAQ,YAO7FC,OAAOF,EADd,CAAC,WAEtBD,EAAMI,UAAUL,OAAS,CACvBM,QAAS,CACPC,QAAS,gBACTC,YAAY,GAEd,eAAgB,CAEdD,QAAS,IAAIE,OAAO,OAASP,EAAeQ,KAAK,KAAO,qBACxDF,YAAY,EACZG,OAAQ,CACN,YAAa,CACXJ,QAAS,YACTK,MAAO,aAETC,YAAa,UAGjB,iBAAkB,CAChBN,QAAS,aACTI,OAAQ,CACN,YAAa,CACXJ,QAAS,gCACTK,MAAO,aAET,cAAe,CACbL,QAAS,qCACTO,QAAQ,EACRF,MAAO,cAETC,YAAa,sBAGjB,gBAAiB,CAAC,CAChBN,QAAS,eAETI,OAAQ,CACNE,YAAa,UACb,iBAAkB,CAChBN,QAAS,+BACTK,MAAO,YAGV,CACDL,QAAS,mBAETC,YAAY,EACZG,OAAQ,CACN,iBAAkB,CAChBJ,QAAS,+BACTK,MAAO,aAIbG,QAAS,IAAIN,OAAO,SAAWN,EAASO,KAAK,KAAO,OAAQ,KAC5DM,SAAU,wBACVC,OAAQ,oFACRC,SAAU,mDACVL,YAAa,iBApEjB,CAsEGZ,GA/ELkB,EAAOC,QAAUpB,EACjBA,EAAOqB,YAAc,SACrBrB,EAAOsB,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_promql.d65df3d3.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = promql;\npromql.displayName = 'promql';\npromql.aliases = [];\n\nfunction promql(Prism) {\n  // Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts\n  // As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/\n  ;\n\n  (function (Prism) {\n    // PromQL Aggregation Operators\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\n    var aggregations = ['sum', 'min', 'max', 'avg', 'group', 'stddev', 'stdvar', 'count', 'count_values', 'bottomk', 'topk', 'quantile']; // PromQL vector matching + the by and without clauses\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\n\n    var vectorMatching = ['on', 'ignoring', 'group_right', 'group_left', 'by', 'without']; // PromQL offset modifier\n    // (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\n\n    var offsetModifier = ['offset'];\n    var keywords = aggregations.concat(vectorMatching, offsetModifier);\n    Prism.languages.promql = {\n      comment: {\n        pattern: /(^[ \\t]*)#.*/m,\n        lookbehind: true\n      },\n      'vector-match': {\n        // Match the comma-separated label lists inside vector matching:\n        pattern: new RegExp('((?:' + vectorMatching.join('|') + ')\\\\s*)\\\\([^)]*\\\\)'),\n        lookbehind: true,\n        inside: {\n          'label-key': {\n            pattern: /\\b[^,]+\\b/,\n            alias: 'attr-name'\n          },\n          punctuation: /[(),]/\n        }\n      },\n      'context-labels': {\n        pattern: /\\{[^{}]*\\}/,\n        inside: {\n          'label-key': {\n            pattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\n            alias: 'attr-name'\n          },\n          'label-value': {\n            pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n            greedy: true,\n            alias: 'attr-value'\n          },\n          punctuation: /\\{|\\}|=~?|![=~]|,/\n        }\n      },\n      'context-range': [{\n        pattern: /\\[[\\w\\s:]+\\]/,\n        // [1m]\n        inside: {\n          punctuation: /\\[|\\]|:/,\n          'range-duration': {\n            pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n            alias: 'number'\n          }\n        }\n      }, {\n        pattern: /(\\boffset\\s+)\\w+/,\n        // offset 1m\n        lookbehind: true,\n        inside: {\n          'range-duration': {\n            pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n            alias: 'number'\n          }\n        }\n      }],\n      keyword: new RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', 'i'),\n      function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n      number: /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\n      operator: /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|or|unless)\\b/i,\n      punctuation: /[{};()`,.[\\]]/\n    };\n  })(Prism);\n}"],"sourceRoot":""}