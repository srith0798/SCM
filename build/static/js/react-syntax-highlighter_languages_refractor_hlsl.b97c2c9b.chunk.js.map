{"version":3,"sources":["../node_modules/refractor/lang/hlsl.js","../node_modules/refractor/lang/c.js"],"names":["refractorC","hlsl","Prism","register","languages","extend","c","keyword","number","boolean","module","exports","displayName","aliases","comment","pattern","greedy","string","lookbehind","function","operator","insertBefore","char","macro","alias","inside","directive","punctuation","expression","constant"],"mappings":"4HAEA,IAAIA,EAAa,EAAQ,KAMzB,SAASC,EAAKC,GACZA,EAAMC,SAASH,GACfE,EAAME,UAAUH,KAAOC,EAAME,UAAUC,OAAO,IAAK,CAKjD,aAAc,CAACH,EAAME,UAAUE,EAAE,cAAe,wgBAChDC,QAAS,CACT,gyBACA,gHAEAC,OAAQ,gFACRC,QAAS,uBAjBbC,EAAOC,QAAUV,EACjBA,EAAKW,YAAc,OACnBX,EAAKY,QAAU,I,iCCAf,SAASP,EAAEJ,GACTA,EAAME,UAAUE,EAAIJ,EAAME,UAAUC,OAAO,QAAS,CAClDS,QAAS,CACPC,QAAS,sEACTC,QAAQ,GAEVC,OAAQ,CAENF,QAAS,sCACTC,QAAQ,GAEV,aAAc,CACZD,QAAS,mFACTG,YAAY,GAEdX,QAAS,oVACTY,SAAU,wBACVX,OAAQ,oHACRY,SAAU,oDAEZlB,EAAME,UAAUiB,aAAa,IAAK,SAAU,CAC1CC,KAAM,CAEJP,QAAS,2CACTC,QAAQ,KAGZd,EAAME,UAAUiB,aAAa,IAAK,SAAU,CAC1CE,MAAO,CAGLR,QAAS,4FACTG,YAAY,EACZF,QAAQ,EACRQ,MAAO,WACPC,OAAQ,CACNR,OAAQ,CAAC,CAEPF,QAAS,2BACTG,YAAY,GACXhB,EAAME,UAAUE,EAAU,QAC7BgB,KAAMpB,EAAME,UAAUE,EAAQ,KAC9BQ,QAASZ,EAAME,UAAUE,EAAW,QACpC,aAAc,CAAC,CACbS,QAAS,+BACTG,YAAY,GACX,CACDH,QAAS,+BACTG,YAAY,EACZM,MAAO,aAGTE,UAAW,CACTX,QAAS,gBACTG,YAAY,EACZM,MAAO,WAET,iBAAkB,KAClBG,YAAa,kBACbC,WAAY,CACVb,QAAS,YACTU,OAAQvB,EAAME,UAAUE,OAKhCJ,EAAME,UAAUiB,aAAa,IAAK,WAAY,CAE5CQ,SAAU,sIAEL3B,EAAME,UAAUE,EAAW,QA1EpCI,EAAOC,QAAUL,EACjBA,EAAEM,YAAc,IAChBN,EAAEO,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_hlsl.b97c2c9b.chunk.js","sourcesContent":["'use strict';\n\nvar refractorC = require('./c.js');\n\nmodule.exports = hlsl;\nhlsl.displayName = 'hlsl';\nhlsl.aliases = [];\n\nfunction hlsl(Prism) {\n  Prism.register(refractorC);\n  Prism.languages.hlsl = Prism.languages.extend('c', {\n    // Regarding keywords and class names:\n    // The list of all keywords was split into 'keyword' and 'class-name' tokens based on whether they are capitalized.\n    // https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-keywords\n    // https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-reserved-words\n    'class-name': [Prism.languages.c['class-name'], /\\b(?:AppendStructuredBuffer|BlendState|Buffer|ByteAddressBuffer|CompileShader|ComputeShader|ConsumeStructuredBuffer|DepthStencilState|DepthStencilView|DomainShader|GeometryShader|Hullshader|InputPatch|LineStream|OutputPatch|PixelShader|PointStream|RWBuffer|RWByteAddressBuffer|RWStructuredBuffer|RWTexture(?:1D|1DArray|2D|2DArray|3D)|RasterizerState|RenderTargetView|SamplerComparisonState|SamplerState|StructuredBuffer|Texture(?:1D|1DArray|2D|2DArray|2DMS|2DMSArray|3D|Cube|CubeArray)|TriangleStream|VertexShader)\\b/],\n    keyword: [// HLSL keyword\n    /\\b(?:asm|asm_fragment|auto|break|case|catch|cbuffer|centroid|char|class|column_major|compile|compile_fragment|const|const_cast|continue|default|delete|discard|do|dynamic_cast|else|enum|explicit|export|extern|for|friend|fxgroup|goto|groupshared|if|in|inline|inout|interface|line|lineadj|linear|long|matrix|mutable|namespace|new|nointerpolation|noperspective|operator|out|packoffset|pass|pixelfragment|point|precise|private|protected|public|register|reinterpret_cast|return|row_major|sample|sampler|shared|short|signed|sizeof|snorm|stateblock|stateblock_state|static|static_cast|string|struct|switch|tbuffer|technique|technique10|technique11|template|texture|this|throw|triangle|triangleadj|try|typedef|typename|uniform|union|unorm|unsigned|using|vector|vertexfragment|virtual|void|volatile|while)\\b/, // scalar, vector, and matrix types\n    /\\b(?:bool|double|dword|float|half|int|min(?:10float|12int|16(?:float|int|uint))|uint)(?:[1-4](?:x[1-4])?)?\\b/],\n    // https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-grammar#floating-point-numbers\n    number: /(?:(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?|\\b0x[\\da-fA-F]+)[fFhHlLuU]?\\b/,\n    boolean: /\\b(?:false|true)\\b/\n  });\n}","'use strict';\n\nmodule.exports = c;\nc.displayName = 'c';\nc.aliases = [];\n\nfunction c(Prism) {\n  Prism.languages.c = Prism.languages.extend('clike', {\n    comment: {\n      pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      greedy: true\n    },\n    string: {\n      // https://en.cppreference.com/w/c/language/string_literal\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n  });\n  Prism.languages.insertBefore('c', 'string', {\n    char: {\n      // https://en.cppreference.com/w/c/language/character_constant\n      pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('c', 'string', {\n    macro: {\n      // allow for multiline macro definitions\n      // spaces after the # character compile fine with gcc\n      pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property',\n      inside: {\n        string: [{\n          // highlight the path of the include statement as a string\n          pattern: /^(#\\s*include\\s*)<[^>]+>/,\n          lookbehind: true\n        }, Prism.languages.c['string']],\n        char: Prism.languages.c['char'],\n        comment: Prism.languages.c['comment'],\n        'macro-name': [{\n          pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n          lookbehind: true\n        }, {\n          pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n          lookbehind: true,\n          alias: 'function'\n        }],\n        // highlight macro directives as keywords\n        directive: {\n          pattern: /^(#\\s*)[a-z]+/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'directive-hash': /^#/,\n        punctuation: /##|\\\\(?=[\\r\\n])/,\n        expression: {\n          pattern: /\\S[\\s\\S]*/,\n          inside: Prism.languages.c\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('c', 'function', {\n    // highlight predefined macros as constants\n    constant: /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n  });\n  delete Prism.languages.c['boolean'];\n}"],"sourceRoot":""}